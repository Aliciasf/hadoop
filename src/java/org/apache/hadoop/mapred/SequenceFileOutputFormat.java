/**
 * Copyright 2005 The Apache Software Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.apache.hadoop.mapred;

import java.io.IOException;
import java.io.File;                              // deprecated
import java.util.Arrays;

import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;

import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.WritableComparable;
import org.apache.hadoop.io.Writable;
import org.apache.hadoop.io.SequenceFile.CompressionType;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.util.Progressable;

/** An {@link OutputFormat} that writes {@link SequenceFile}s. */
public class SequenceFileOutputFormat extends OutputFormatBase {

  public RecordWriter getRecordWriter(FileSystem fs, JobConf job,
                                      String name, Progressable progress)
                                      throws IOException {

    Path file = new Path(job.getOutputPath(), name);

    /** TODO: Figure out a way to deprecate 'mapred.output.compress' */
    final SequenceFile.Writer out = 
      SequenceFile.createWriter(fs, job, file,
                              job.getOutputKeyClass(),
                              job.getOutputValueClass(),
                              job.getBoolean("mapred.output.compress", false) ? 
                                  CompressionType.RECORD : 
                                  CompressionType.valueOf(
                                    job.get("mapred.seqfile.compression.type", 
                                        "NONE")
                                  ),
                              progress);

    return new RecordWriter() {

        public void write(WritableComparable key, Writable value)
          throws IOException {

          out.append(key, value);
        }

        public void close(Reporter reporter) throws IOException { out.close();}
      };
  }

  /** @deprecated Call {@link #getReaders(Configuration, Path)} instead. */
  public static SequenceFile.Reader[] getReaders(Configuration conf, File dir) 
    throws IOException {
    return getReaders(conf, new Path(dir.toString()));
  }

  /** Open the output generated by this format. */
  public static SequenceFile.Reader[] getReaders(Configuration conf, Path dir)
    throws IOException {
    FileSystem fs = FileSystem.get(conf);
    Path[] names = fs.listPaths(dir);
    
    // sort names, so that hash partitioning works
    Arrays.sort(names);
    
    SequenceFile.Reader[] parts = new SequenceFile.Reader[names.length];
    for (int i = 0; i < names.length; i++) {
      parts[i] = new SequenceFile.Reader(fs, names[i], conf);
    }
    return parts;
  }
}

