/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class ThriftHiveMetastore {

/**
 * This interface is NOT live yet.
 */
public interface Iface extends com.facebook.fb303.FacebookService.Iface {

public boolean create_database(String name, String location_uri) throws AlreadyExistsException, MetaException, TException;

public Database get_database(String name) throws NoSuchObjectException, MetaException, TException;

public boolean drop_database(String name) throws MetaException, TException;

public List<String> get_databases() throws MetaException, TException;

public Type get_type(String name) throws MetaException, TException;

public boolean create_type(Type type) throws AlreadyExistsException, InvalidObjectException, MetaException, TException;

public boolean drop_type(String type) throws MetaException, TException;

public Map<String,Type> get_type_all(String name) throws MetaException, TException;

public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException;

public void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException;

public void drop_table(String dbname, String name, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

public List<String> get_tables(String db_name, String pattern) throws MetaException, UnknownTableException, UnknownDBException, TException;

public Table get_table(String dbname, String tbl_name) throws MetaException, NoSuchObjectException, TException;

public boolean set_table_parameters(String dbname, String tbl_name, Map<String,String> params) throws NoSuchObjectException, MetaException, TException;

public void alter_table(String dbname, String tbl_name, Table new_tbl) throws InvalidOperationException, MetaException, TException;

public void truncate_table(String db_name, String table_name, String partition) throws MetaException, UnknownTableException, UnknownDBException, TException;

public List<String> cat(String db_name, String table_name, String partition, int high) throws MetaException, UnknownDBException, UnknownTableException, TException;

public Partition add_partition(Partition new_part) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

public Partition append_partition(String db_name, String tbl_name, List<String> part_vals) throws InvalidObjectException, AlreadyExistsException, MetaException, TException;

public boolean drop_partition(String db_name, String tbl_name, List<String> part_vals, boolean deleteData) throws NoSuchObjectException, MetaException, TException;

public Partition get_partition(String db_name, String tbl_name, List<String> part_vals) throws MetaException, TException;

public List<Partition> get_partitions(String db_name, String tbl_name, short max_parts) throws NoSuchObjectException, MetaException, TException;

public boolean set_partition_parameters(String db_name, String tbl_name, String pname, Map<String,String> params) throws NoSuchObjectException, MetaException, TException;

public boolean alter_partitions(StorageDescriptor sd, List<String> parts) throws InvalidOperationException, MetaException, TException;

public boolean create_index(Index index_def) throws IndexAlreadyExistsException, MetaException, TException;

}

public static class Client extends com.facebook.fb303.FacebookService.Client implements Iface {
public Client(TProtocol prot)
{
this(prot, prot);
}

public Client(TProtocol iprot, TProtocol oprot)
{
super(iprot, oprot);
}

public boolean create_database(String name, String location_uri) throws AlreadyExistsException, MetaException, TException
{
send_create_database(name, location_uri);
return recv_create_database();
}

public void send_create_database(String name, String location_uri) throws TException
{
oprot_.writeMessageBegin(new TMessage("create_database", TMessageType.CALL, seqid_));
create_database_args args = new create_database_args();
args.name = name;
args.location_uri = location_uri;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_create_database() throws AlreadyExistsException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
create_database_result result = new create_database_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "create_database failed: unknown result");
}

public Database get_database(String name) throws NoSuchObjectException, MetaException, TException
{
send_get_database(name);
return recv_get_database();
}

public void send_get_database(String name) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_database", TMessageType.CALL, seqid_));
get_database_args args = new get_database_args();
args.name = name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public Database recv_get_database() throws NoSuchObjectException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_database_result result = new get_database_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_database failed: unknown result");
}

public boolean drop_database(String name) throws MetaException, TException
{
send_drop_database(name);
return recv_drop_database();
}

public void send_drop_database(String name) throws TException
{
oprot_.writeMessageBegin(new TMessage("drop_database", TMessageType.CALL, seqid_));
drop_database_args args = new drop_database_args();
args.name = name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_drop_database() throws MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
drop_database_result result = new drop_database_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_database failed: unknown result");
}

public List<String> get_databases() throws MetaException, TException
{
send_get_databases();
return recv_get_databases();
}

public void send_get_databases() throws TException
{
oprot_.writeMessageBegin(new TMessage("get_databases", TMessageType.CALL, seqid_));
get_databases_args args = new get_databases_args();
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<String> recv_get_databases() throws MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_databases_result result = new get_databases_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_databases failed: unknown result");
}

public Type get_type(String name) throws MetaException, TException
{
send_get_type(name);
return recv_get_type();
}

public void send_get_type(String name) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_type", TMessageType.CALL, seqid_));
get_type_args args = new get_type_args();
args.name = name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public Type recv_get_type() throws MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_type_result result = new get_type_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_type failed: unknown result");
}

public boolean create_type(Type type) throws AlreadyExistsException, InvalidObjectException, MetaException, TException
{
send_create_type(type);
return recv_create_type();
}

public void send_create_type(Type type) throws TException
{
oprot_.writeMessageBegin(new TMessage("create_type", TMessageType.CALL, seqid_));
create_type_args args = new create_type_args();
args.type = type;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_create_type() throws AlreadyExistsException, InvalidObjectException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
create_type_result result = new create_type_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
if (result.__isset.o3) {
  throw result.o3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "create_type failed: unknown result");
}

public boolean drop_type(String type) throws MetaException, TException
{
send_drop_type(type);
return recv_drop_type();
}

public void send_drop_type(String type) throws TException
{
oprot_.writeMessageBegin(new TMessage("drop_type", TMessageType.CALL, seqid_));
drop_type_args args = new drop_type_args();
args.type = type;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_drop_type() throws MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
drop_type_result result = new drop_type_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_type failed: unknown result");
}

public Map<String,Type> get_type_all(String name) throws MetaException, TException
{
send_get_type_all(name);
return recv_get_type_all();
}

public void send_get_type_all(String name) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_type_all", TMessageType.CALL, seqid_));
get_type_all_args args = new get_type_all_args();
args.name = name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public Map<String,Type> recv_get_type_all() throws MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_type_all_result result = new get_type_all_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_type_all failed: unknown result");
}

public List<FieldSchema> get_fields(String db_name, String table_name) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_get_fields(db_name, table_name);
return recv_get_fields();
}

public void send_get_fields(String db_name, String table_name) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_fields", TMessageType.CALL, seqid_));
get_fields_args args = new get_fields_args();
args.db_name = db_name;
args.table_name = table_name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<FieldSchema> recv_get_fields() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_fields_result result = new get_fields_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_fields failed: unknown result");
}

public void create_table(Table tbl) throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException
{
send_create_table(tbl);
recv_create_table();
}

public void send_create_table(Table tbl) throws TException
{
oprot_.writeMessageBegin(new TMessage("create_table", TMessageType.CALL, seqid_));
create_table_args args = new create_table_args();
args.tbl = tbl;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public void recv_create_table() throws AlreadyExistsException, InvalidObjectException, MetaException, NoSuchObjectException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
create_table_result result = new create_table_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
if (result.__isset.o4) {
  throw result.o4;
}
return;
}

public void drop_table(String dbname, String name, boolean deleteData) throws NoSuchObjectException, MetaException, TException
{
send_drop_table(dbname, name, deleteData);
recv_drop_table();
}

public void send_drop_table(String dbname, String name, boolean deleteData) throws TException
{
oprot_.writeMessageBegin(new TMessage("drop_table", TMessageType.CALL, seqid_));
drop_table_args args = new drop_table_args();
args.dbname = dbname;
args.name = name;
args.deleteData = deleteData;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public void recv_drop_table() throws NoSuchObjectException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
drop_table_result result = new drop_table_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
return;
}

public List<String> get_tables(String db_name, String pattern) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_get_tables(db_name, pattern);
return recv_get_tables();
}

public void send_get_tables(String db_name, String pattern) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_tables", TMessageType.CALL, seqid_));
get_tables_args args = new get_tables_args();
args.db_name = db_name;
args.pattern = pattern;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<String> recv_get_tables() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_tables_result result = new get_tables_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_tables failed: unknown result");
}

public Table get_table(String dbname, String tbl_name) throws MetaException, NoSuchObjectException, TException
{
send_get_table(dbname, tbl_name);
return recv_get_table();
}

public void send_get_table(String dbname, String tbl_name) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_table", TMessageType.CALL, seqid_));
get_table_args args = new get_table_args();
args.dbname = dbname;
args.tbl_name = tbl_name;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public Table recv_get_table() throws MetaException, NoSuchObjectException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_table_result result = new get_table_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_table failed: unknown result");
}

public boolean set_table_parameters(String dbname, String tbl_name, Map<String,String> params) throws NoSuchObjectException, MetaException, TException
{
send_set_table_parameters(dbname, tbl_name, params);
return recv_set_table_parameters();
}

public void send_set_table_parameters(String dbname, String tbl_name, Map<String,String> params) throws TException
{
oprot_.writeMessageBegin(new TMessage("set_table_parameters", TMessageType.CALL, seqid_));
set_table_parameters_args args = new set_table_parameters_args();
args.dbname = dbname;
args.tbl_name = tbl_name;
args.params = params;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_set_table_parameters() throws NoSuchObjectException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
set_table_parameters_result result = new set_table_parameters_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "set_table_parameters failed: unknown result");
}

public void alter_table(String dbname, String tbl_name, Table new_tbl) throws InvalidOperationException, MetaException, TException
{
send_alter_table(dbname, tbl_name, new_tbl);
recv_alter_table();
}

public void send_alter_table(String dbname, String tbl_name, Table new_tbl) throws TException
{
oprot_.writeMessageBegin(new TMessage("alter_table", TMessageType.CALL, seqid_));
alter_table_args args = new alter_table_args();
args.dbname = dbname;
args.tbl_name = tbl_name;
args.new_tbl = new_tbl;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public void recv_alter_table() throws InvalidOperationException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
alter_table_result result = new alter_table_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
return;
}

public void truncate_table(String db_name, String table_name, String partition) throws MetaException, UnknownTableException, UnknownDBException, TException
{
send_truncate_table(db_name, table_name, partition);
recv_truncate_table();
}

public void send_truncate_table(String db_name, String table_name, String partition) throws TException
{
oprot_.writeMessageBegin(new TMessage("truncate_table", TMessageType.CALL, seqid_));
truncate_table_args args = new truncate_table_args();
args.db_name = db_name;
args.table_name = table_name;
args.partition = partition;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public void recv_truncate_table() throws MetaException, UnknownTableException, UnknownDBException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
truncate_table_result result = new truncate_table_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
return;
}

public List<String> cat(String db_name, String table_name, String partition, int high) throws MetaException, UnknownDBException, UnknownTableException, TException
{
send_cat(db_name, table_name, partition, high);
return recv_cat();
}

public void send_cat(String db_name, String table_name, String partition, int high) throws TException
{
oprot_.writeMessageBegin(new TMessage("cat", TMessageType.CALL, seqid_));
cat_args args = new cat_args();
args.db_name = db_name;
args.table_name = table_name;
args.partition = partition;
args.high = high;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<String> recv_cat() throws MetaException, UnknownDBException, UnknownTableException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
cat_result result = new cat_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.ouch1) {
  throw result.ouch1;
}
if (result.__isset.ouch2) {
  throw result.ouch2;
}
if (result.__isset.ouch3) {
  throw result.ouch3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "cat failed: unknown result");
}

public Partition add_partition(Partition new_part) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
{
send_add_partition(new_part);
return recv_add_partition();
}

public void send_add_partition(Partition new_part) throws TException
{
oprot_.writeMessageBegin(new TMessage("add_partition", TMessageType.CALL, seqid_));
add_partition_args args = new add_partition_args();
args.new_part = new_part;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public Partition recv_add_partition() throws InvalidObjectException, AlreadyExistsException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
add_partition_result result = new add_partition_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
if (result.__isset.o3) {
  throw result.o3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "add_partition failed: unknown result");
}

public Partition append_partition(String db_name, String tbl_name, List<String> part_vals) throws InvalidObjectException, AlreadyExistsException, MetaException, TException
{
send_append_partition(db_name, tbl_name, part_vals);
return recv_append_partition();
}

public void send_append_partition(String db_name, String tbl_name, List<String> part_vals) throws TException
{
oprot_.writeMessageBegin(new TMessage("append_partition", TMessageType.CALL, seqid_));
append_partition_args args = new append_partition_args();
args.db_name = db_name;
args.tbl_name = tbl_name;
args.part_vals = part_vals;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public Partition recv_append_partition() throws InvalidObjectException, AlreadyExistsException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
append_partition_result result = new append_partition_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
if (result.__isset.o3) {
  throw result.o3;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "append_partition failed: unknown result");
}

public boolean drop_partition(String db_name, String tbl_name, List<String> part_vals, boolean deleteData) throws NoSuchObjectException, MetaException, TException
{
send_drop_partition(db_name, tbl_name, part_vals, deleteData);
return recv_drop_partition();
}

public void send_drop_partition(String db_name, String tbl_name, List<String> part_vals, boolean deleteData) throws TException
{
oprot_.writeMessageBegin(new TMessage("drop_partition", TMessageType.CALL, seqid_));
drop_partition_args args = new drop_partition_args();
args.db_name = db_name;
args.tbl_name = tbl_name;
args.part_vals = part_vals;
args.deleteData = deleteData;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_drop_partition() throws NoSuchObjectException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
drop_partition_result result = new drop_partition_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "drop_partition failed: unknown result");
}

public Partition get_partition(String db_name, String tbl_name, List<String> part_vals) throws MetaException, TException
{
send_get_partition(db_name, tbl_name, part_vals);
return recv_get_partition();
}

public void send_get_partition(String db_name, String tbl_name, List<String> part_vals) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_partition", TMessageType.CALL, seqid_));
get_partition_args args = new get_partition_args();
args.db_name = db_name;
args.tbl_name = tbl_name;
args.part_vals = part_vals;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public Partition recv_get_partition() throws MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_partition_result result = new get_partition_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partition failed: unknown result");
}

public List<Partition> get_partitions(String db_name, String tbl_name, short max_parts) throws NoSuchObjectException, MetaException, TException
{
send_get_partitions(db_name, tbl_name, max_parts);
return recv_get_partitions();
}

public void send_get_partitions(String db_name, String tbl_name, short max_parts) throws TException
{
oprot_.writeMessageBegin(new TMessage("get_partitions", TMessageType.CALL, seqid_));
get_partitions_args args = new get_partitions_args();
args.db_name = db_name;
args.tbl_name = tbl_name;
args.max_parts = max_parts;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public List<Partition> recv_get_partitions() throws NoSuchObjectException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
get_partitions_result result = new get_partitions_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "get_partitions failed: unknown result");
}

public boolean set_partition_parameters(String db_name, String tbl_name, String pname, Map<String,String> params) throws NoSuchObjectException, MetaException, TException
{
send_set_partition_parameters(db_name, tbl_name, pname, params);
return recv_set_partition_parameters();
}

public void send_set_partition_parameters(String db_name, String tbl_name, String pname, Map<String,String> params) throws TException
{
oprot_.writeMessageBegin(new TMessage("set_partition_parameters", TMessageType.CALL, seqid_));
set_partition_parameters_args args = new set_partition_parameters_args();
args.db_name = db_name;
args.tbl_name = tbl_name;
args.pname = pname;
args.params = params;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_set_partition_parameters() throws NoSuchObjectException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
set_partition_parameters_result result = new set_partition_parameters_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "set_partition_parameters failed: unknown result");
}

public boolean alter_partitions(StorageDescriptor sd, List<String> parts) throws InvalidOperationException, MetaException, TException
{
send_alter_partitions(sd, parts);
return recv_alter_partitions();
}

public void send_alter_partitions(StorageDescriptor sd, List<String> parts) throws TException
{
oprot_.writeMessageBegin(new TMessage("alter_partitions", TMessageType.CALL, seqid_));
alter_partitions_args args = new alter_partitions_args();
args.sd = sd;
args.parts = parts;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_alter_partitions() throws InvalidOperationException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
alter_partitions_result result = new alter_partitions_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "alter_partitions failed: unknown result");
}

public boolean create_index(Index index_def) throws IndexAlreadyExistsException, MetaException, TException
{
send_create_index(index_def);
return recv_create_index();
}

public void send_create_index(Index index_def) throws TException
{
oprot_.writeMessageBegin(new TMessage("create_index", TMessageType.CALL, seqid_));
create_index_args args = new create_index_args();
args.index_def = index_def;
args.write(oprot_);
oprot_.writeMessageEnd();
oprot_.getTransport().flush();
}

public boolean recv_create_index() throws IndexAlreadyExistsException, MetaException, TException
{
TMessage msg = iprot_.readMessageBegin();
if (msg.type == TMessageType.EXCEPTION) {
  TApplicationException x = TApplicationException.read(iprot_);
  iprot_.readMessageEnd();
  throw x;
}
create_index_result result = new create_index_result();
result.read(iprot_);
iprot_.readMessageEnd();
if (result.__isset.success) {
  return result.success;
}
if (result.__isset.o1) {
  throw result.o1;
}
if (result.__isset.o2) {
  throw result.o2;
}
throw new TApplicationException(TApplicationException.MISSING_RESULT, "create_index failed: unknown result");
}

}
public static class Processor extends com.facebook.fb303.FacebookService.Processor implements TProcessor {
public Processor(Iface iface)
{
super(iface);
iface_ = iface;
processMap_.put("create_database", new create_database());
processMap_.put("get_database", new get_database());
processMap_.put("drop_database", new drop_database());
processMap_.put("get_databases", new get_databases());
processMap_.put("get_type", new get_type());
processMap_.put("create_type", new create_type());
processMap_.put("drop_type", new drop_type());
processMap_.put("get_type_all", new get_type_all());
processMap_.put("get_fields", new get_fields());
processMap_.put("create_table", new create_table());
processMap_.put("drop_table", new drop_table());
processMap_.put("get_tables", new get_tables());
processMap_.put("get_table", new get_table());
processMap_.put("set_table_parameters", new set_table_parameters());
processMap_.put("alter_table", new alter_table());
processMap_.put("truncate_table", new truncate_table());
processMap_.put("cat", new cat());
processMap_.put("add_partition", new add_partition());
processMap_.put("append_partition", new append_partition());
processMap_.put("drop_partition", new drop_partition());
processMap_.put("get_partition", new get_partition());
processMap_.put("get_partitions", new get_partitions());
processMap_.put("set_partition_parameters", new set_partition_parameters());
processMap_.put("alter_partitions", new alter_partitions());
processMap_.put("create_index", new create_index());
}

private Iface iface_;

public boolean process(TProtocol iprot, TProtocol oprot) throws TException
{
TMessage msg = iprot.readMessageBegin();
ProcessFunction fn = processMap_.get(msg.name);
if (fn == null) {
  TProtocolUtil.skip(iprot, TType.STRUCT);
  iprot.readMessageEnd();
  TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
  oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
  x.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
  return true;
}
fn.process(msg.seqid, iprot, oprot);
return true;
}

private class create_database implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  create_database_args args = new create_database_args();
  args.read(iprot);
  iprot.readMessageEnd();
  create_database_result result = new create_database_result();
  try {
    result.success = iface_.create_database(args.name, args.location_uri);
    result.__isset.success = true;
  } catch (AlreadyExistsException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("create_database", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_database implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_database_args args = new get_database_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_database_result result = new get_database_result();
  try {
    result.success = iface_.get_database(args.name);
    result.__isset.success = true;
  } catch (NoSuchObjectException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_database", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class drop_database implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  drop_database_args args = new drop_database_args();
  args.read(iprot);
  iprot.readMessageEnd();
  drop_database_result result = new drop_database_result();
  try {
    result.success = iface_.drop_database(args.name);
    result.__isset.success = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("drop_database", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_databases implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_databases_args args = new get_databases_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_databases_result result = new get_databases_result();
  try {
    result.success = iface_.get_databases();
    result.__isset.success = true;
  } catch (MetaException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_databases", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_type implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_type_args args = new get_type_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_type_result result = new get_type_result();
  try {
    result.success = iface_.get_type(args.name);
    result.__isset.success = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_type", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class create_type implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  create_type_args args = new create_type_args();
  args.read(iprot);
  iprot.readMessageEnd();
  create_type_result result = new create_type_result();
  try {
    result.success = iface_.create_type(args.type);
    result.__isset.success = true;
  } catch (AlreadyExistsException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (InvalidObjectException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  } catch (MetaException o3) {
    result.o3 = o3;
    result.__isset.o3 = true;
  }
  oprot.writeMessageBegin(new TMessage("create_type", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class drop_type implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  drop_type_args args = new drop_type_args();
  args.read(iprot);
  iprot.readMessageEnd();
  drop_type_result result = new drop_type_result();
  try {
    result.success = iface_.drop_type(args.type);
    result.__isset.success = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("drop_type", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_type_all implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_type_all_args args = new get_type_all_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_type_all_result result = new get_type_all_result();
  try {
    result.success = iface_.get_type_all(args.name);
    result.__isset.success = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_type_all", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_fields implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_fields_args args = new get_fields_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_fields_result result = new get_fields_result();
  try {
    result.success = iface_.get_fields(args.db_name, args.table_name);
    result.__isset.success = true;
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_fields", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class create_table implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  create_table_args args = new create_table_args();
  args.read(iprot);
  iprot.readMessageEnd();
  create_table_result result = new create_table_result();
  try {
    iface_.create_table(args.tbl);
  } catch (AlreadyExistsException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (InvalidObjectException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (MetaException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  } catch (NoSuchObjectException o4) {
    result.o4 = o4;
    result.__isset.o4 = true;
  }
  oprot.writeMessageBegin(new TMessage("create_table", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class drop_table implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  drop_table_args args = new drop_table_args();
  args.read(iprot);
  iprot.readMessageEnd();
  drop_table_result result = new drop_table_result();
  try {
    iface_.drop_table(args.dbname, args.name, args.deleteData);
  } catch (NoSuchObjectException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("drop_table", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_tables implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_tables_args args = new get_tables_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_tables_result result = new get_tables_result();
  try {
    result.success = iface_.get_tables(args.db_name, args.pattern);
    result.__isset.success = true;
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_tables", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_table implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_table_args args = new get_table_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_table_result result = new get_table_result();
  try {
    result.success = iface_.get_table(args.dbname, args.tbl_name);
    result.__isset.success = true;
  } catch (MetaException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (NoSuchObjectException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_table", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class set_table_parameters implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  set_table_parameters_args args = new set_table_parameters_args();
  args.read(iprot);
  iprot.readMessageEnd();
  set_table_parameters_result result = new set_table_parameters_result();
  try {
    result.success = iface_.set_table_parameters(args.dbname, args.tbl_name, args.params);
    result.__isset.success = true;
  } catch (NoSuchObjectException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("set_table_parameters", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class alter_table implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  alter_table_args args = new alter_table_args();
  args.read(iprot);
  iprot.readMessageEnd();
  alter_table_result result = new alter_table_result();
  try {
    iface_.alter_table(args.dbname, args.tbl_name, args.new_tbl);
  } catch (InvalidOperationException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("alter_table", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class truncate_table implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  truncate_table_args args = new truncate_table_args();
  args.read(iprot);
  iprot.readMessageEnd();
  truncate_table_result result = new truncate_table_result();
  try {
    iface_.truncate_table(args.db_name, args.table_name, args.partition);
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownTableException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownDBException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("truncate_table", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class cat implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  cat_args args = new cat_args();
  args.read(iprot);
  iprot.readMessageEnd();
  cat_result result = new cat_result();
  try {
    result.success = iface_.cat(args.db_name, args.table_name, args.partition, args.high);
    result.__isset.success = true;
  } catch (MetaException ouch1) {
    result.ouch1 = ouch1;
    result.__isset.ouch1 = true;
  } catch (UnknownDBException ouch2) {
    result.ouch2 = ouch2;
    result.__isset.ouch2 = true;
  } catch (UnknownTableException ouch3) {
    result.ouch3 = ouch3;
    result.__isset.ouch3 = true;
  }
  oprot.writeMessageBegin(new TMessage("cat", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class add_partition implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  add_partition_args args = new add_partition_args();
  args.read(iprot);
  iprot.readMessageEnd();
  add_partition_result result = new add_partition_result();
  try {
    result.success = iface_.add_partition(args.new_part);
    result.__isset.success = true;
  } catch (InvalidObjectException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (AlreadyExistsException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  } catch (MetaException o3) {
    result.o3 = o3;
    result.__isset.o3 = true;
  }
  oprot.writeMessageBegin(new TMessage("add_partition", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class append_partition implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  append_partition_args args = new append_partition_args();
  args.read(iprot);
  iprot.readMessageEnd();
  append_partition_result result = new append_partition_result();
  try {
    result.success = iface_.append_partition(args.db_name, args.tbl_name, args.part_vals);
    result.__isset.success = true;
  } catch (InvalidObjectException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (AlreadyExistsException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  } catch (MetaException o3) {
    result.o3 = o3;
    result.__isset.o3 = true;
  }
  oprot.writeMessageBegin(new TMessage("append_partition", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class drop_partition implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  drop_partition_args args = new drop_partition_args();
  args.read(iprot);
  iprot.readMessageEnd();
  drop_partition_result result = new drop_partition_result();
  try {
    result.success = iface_.drop_partition(args.db_name, args.tbl_name, args.part_vals, args.deleteData);
    result.__isset.success = true;
  } catch (NoSuchObjectException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("drop_partition", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_partition implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_partition_args args = new get_partition_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_partition_result result = new get_partition_result();
  try {
    result.success = iface_.get_partition(args.db_name, args.tbl_name, args.part_vals);
    result.__isset.success = true;
  } catch (MetaException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_partition", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class get_partitions implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  get_partitions_args args = new get_partitions_args();
  args.read(iprot);
  iprot.readMessageEnd();
  get_partitions_result result = new get_partitions_result();
  try {
    result.success = iface_.get_partitions(args.db_name, args.tbl_name, args.max_parts);
    result.__isset.success = true;
  } catch (NoSuchObjectException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("get_partitions", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class set_partition_parameters implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  set_partition_parameters_args args = new set_partition_parameters_args();
  args.read(iprot);
  iprot.readMessageEnd();
  set_partition_parameters_result result = new set_partition_parameters_result();
  try {
    result.success = iface_.set_partition_parameters(args.db_name, args.tbl_name, args.pname, args.params);
    result.__isset.success = true;
  } catch (NoSuchObjectException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("set_partition_parameters", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class alter_partitions implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  alter_partitions_args args = new alter_partitions_args();
  args.read(iprot);
  iprot.readMessageEnd();
  alter_partitions_result result = new alter_partitions_result();
  try {
    result.success = iface_.alter_partitions(args.sd, args.parts);
    result.__isset.success = true;
  } catch (InvalidOperationException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("alter_partitions", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

private class create_index implements ProcessFunction {
public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
{
  create_index_args args = new create_index_args();
  args.read(iprot);
  iprot.readMessageEnd();
  create_index_result result = new create_index_result();
  try {
    result.success = iface_.create_index(args.index_def);
    result.__isset.success = true;
  } catch (IndexAlreadyExistsException o1) {
    result.o1 = o1;
    result.__isset.o1 = true;
  } catch (MetaException o2) {
    result.o2 = o2;
    result.__isset.o2 = true;
  }
  oprot.writeMessageBegin(new TMessage("create_index", TMessageType.REPLY, seqid));
  result.write(oprot);
  oprot.writeMessageEnd();
  oprot.getTransport().flush();
}

}

}

public static class create_database_args implements TBase, java.io.Serializable {
private String name;
private String location_uri;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean name = false;
public boolean location_uri = false;
}

public create_database_args() {
}

public create_database_args(
String name,
String location_uri)
{
this();
this.name = name;
this.__isset.name = true;
this.location_uri = location_uri;
this.__isset.location_uri = true;
}

public String getName() {
return this.name;
}

public void setName(String name) {
this.name = name;
this.__isset.name = true;
}

public void unsetName() {
this.__isset.name = false;
}

public String getLocation_uri() {
return this.location_uri;
}

public void setLocation_uri(String location_uri) {
this.location_uri = location_uri;
this.__isset.location_uri = true;
}

public void unsetLocation_uri() {
this.__isset.location_uri = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_database_args)
  return this.equals((create_database_args)that);
return false;
}

public boolean equals(create_database_args that) {
if (that == null)
  return false;

boolean this_present_name = true && (this.name != null);
boolean that_present_name = true && (that.name != null);
if (this_present_name || that_present_name) {
  if (!(this_present_name && that_present_name))
    return false;
  if (!this.name.equals(that.name))
    return false;
}

boolean this_present_location_uri = true && (this.location_uri != null);
boolean that_present_location_uri = true && (that.location_uri != null);
if (this_present_location_uri || that_present_location_uri) {
  if (!(this_present_location_uri && that_present_location_uri))
    return false;
  if (!this.location_uri.equals(that.location_uri))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.name = iprot.readString();
        this.__isset.name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.location_uri = iprot.readString();
        this.__isset.location_uri = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_database_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.name != null) {
  field.name = "name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.name);
  oprot.writeFieldEnd();
}
if (this.location_uri != null) {
  field.name = "location_uri";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.location_uri);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_database_args(");
sb.append("name:");
sb.append(this.name);
sb.append(",location_uri:");
sb.append(this.location_uri);
sb.append(")");
return sb.toString();
}

}

public static class create_database_result implements TBase, java.io.Serializable {
private boolean success;
private AlreadyExistsException o1;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
}

public create_database_result() {
}

public create_database_result(
boolean success,
AlreadyExistsException o1,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public AlreadyExistsException getO1() {
return this.o1;
}

public void setO1(AlreadyExistsException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_database_result)
  return this.equals((create_database_result)that);
return false;
}

public boolean equals(create_database_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new AlreadyExistsException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_database_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_database_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_database_args implements TBase, java.io.Serializable {
private String name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean name = false;
}

public get_database_args() {
}

public get_database_args(
String name)
{
this();
this.name = name;
this.__isset.name = true;
}

public String getName() {
return this.name;
}

public void setName(String name) {
this.name = name;
this.__isset.name = true;
}

public void unsetName() {
this.__isset.name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_database_args)
  return this.equals((get_database_args)that);
return false;
}

public boolean equals(get_database_args that) {
if (that == null)
  return false;

boolean this_present_name = true && (this.name != null);
boolean that_present_name = true && (that.name != null);
if (this_present_name || that_present_name) {
  if (!(this_present_name && that_present_name))
    return false;
  if (!this.name.equals(that.name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.name = iprot.readString();
        this.__isset.name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_database_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.name != null) {
  field.name = "name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_database_args(");
sb.append("name:");
sb.append(this.name);
sb.append(")");
return sb.toString();
}

}

public static class get_database_result implements TBase, java.io.Serializable {
private Database success;
private NoSuchObjectException o1;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
}

public get_database_result() {
}

public get_database_result(
Database success,
NoSuchObjectException o1,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public Database getSuccess() {
return this.success;
}

public void setSuccess(Database success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public NoSuchObjectException getO1() {
return this.o1;
}

public void setO1(NoSuchObjectException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_database_result)
  return this.equals((get_database_result)that);
return false;
}

public boolean equals(get_database_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.STRUCT) {
        this.success = new Database();
        this.success.read(iprot);
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new NoSuchObjectException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_database_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.STRUCT;
    field.id = 0;
    oprot.writeFieldBegin(field);
    this.success.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_database_result(");
sb.append("success:");
sb.append(this.success.toString());
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class drop_database_args implements TBase, java.io.Serializable {
private String name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean name = false;
}

public drop_database_args() {
}

public drop_database_args(
String name)
{
this();
this.name = name;
this.__isset.name = true;
}

public String getName() {
return this.name;
}

public void setName(String name) {
this.name = name;
this.__isset.name = true;
}

public void unsetName() {
this.__isset.name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_database_args)
  return this.equals((drop_database_args)that);
return false;
}

public boolean equals(drop_database_args that) {
if (that == null)
  return false;

boolean this_present_name = true && (this.name != null);
boolean that_present_name = true && (that.name != null);
if (this_present_name || that_present_name) {
  if (!(this_present_name && that_present_name))
    return false;
  if (!this.name.equals(that.name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.name = iprot.readString();
        this.__isset.name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_database_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.name != null) {
  field.name = "name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_database_args(");
sb.append("name:");
sb.append(this.name);
sb.append(")");
return sb.toString();
}

}

public static class drop_database_result implements TBase, java.io.Serializable {
private boolean success;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o2 = false;
}

public drop_database_result() {
}

public drop_database_result(
boolean success,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_database_result)
  return this.equals((drop_database_result)that);
return false;
}

public boolean equals(drop_database_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_database_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_database_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_databases_args implements TBase, java.io.Serializable {
public get_databases_args() {
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_databases_args)
  return this.equals((get_databases_args)that);
return false;
}

public boolean equals(get_databases_args that) {
if (that == null)
  return false;

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_databases_args");
oprot.writeStructBegin(struct);
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_databases_args(");
sb.append(")");
return sb.toString();
}

}

public static class get_databases_result implements TBase, java.io.Serializable {
private List<String> success;
private MetaException o1;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
}

public get_databases_result() {
}

public get_databases_result(
List<String> success,
MetaException o1)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<String> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(String elem) {
if (this.success == null) {
  this.success = new ArrayList<String>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<String> getSuccess() {
return this.success;
}

public void setSuccess(List<String> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getO1() {
return this.o1;
}

public void setO1(MetaException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_databases_result)
  return this.equals((get_databases_result)that);
return false;
}

public boolean equals(get_databases_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list48 = iprot.readListBegin();
          this.success = new ArrayList<String>(_list48.size);
          for (int _i49 = 0; _i49 < _list48.size; ++_i49)
          {
            String _elem50 = null;
            _elem50 = iprot.readString();
            this.success.add(_elem50);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new MetaException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_databases_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
      for (String _iter51 : this.success)      {
        oprot.writeString(_iter51);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_databases_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_type_args implements TBase, java.io.Serializable {
private String name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean name = false;
}

public get_type_args() {
}

public get_type_args(
String name)
{
this();
this.name = name;
this.__isset.name = true;
}

public String getName() {
return this.name;
}

public void setName(String name) {
this.name = name;
this.__isset.name = true;
}

public void unsetName() {
this.__isset.name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_type_args)
  return this.equals((get_type_args)that);
return false;
}

public boolean equals(get_type_args that) {
if (that == null)
  return false;

boolean this_present_name = true && (this.name != null);
boolean that_present_name = true && (that.name != null);
if (this_present_name || that_present_name) {
  if (!(this_present_name && that_present_name))
    return false;
  if (!this.name.equals(that.name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.name = iprot.readString();
        this.__isset.name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_type_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.name != null) {
  field.name = "name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_type_args(");
sb.append("name:");
sb.append(this.name);
sb.append(")");
return sb.toString();
}

}

public static class get_type_result implements TBase, java.io.Serializable {
private Type success;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o2 = false;
}

public get_type_result() {
}

public get_type_result(
Type success,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public Type getSuccess() {
return this.success;
}

public void setSuccess(Type success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_type_result)
  return this.equals((get_type_result)that);
return false;
}

public boolean equals(get_type_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.STRUCT) {
        this.success = new Type();
        this.success.read(iprot);
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_type_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.STRUCT;
    field.id = 0;
    oprot.writeFieldBegin(field);
    this.success.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_type_result(");
sb.append("success:");
sb.append(this.success.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class create_type_args implements TBase, java.io.Serializable {
private Type type;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean type = false;
}

public create_type_args() {
}

public create_type_args(
Type type)
{
this();
this.type = type;
this.__isset.type = true;
}

public Type getType() {
return this.type;
}

public void setType(Type type) {
this.type = type;
this.__isset.type = true;
}

public void unsetType() {
this.type = null;
this.__isset.type = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_type_args)
  return this.equals((create_type_args)that);
return false;
}

public boolean equals(create_type_args that) {
if (that == null)
  return false;

boolean this_present_type = true && (this.type != null);
boolean that_present_type = true && (that.type != null);
if (this_present_type || that_present_type) {
  if (!(this_present_type && that_present_type))
    return false;
  if (!this.type.equals(that.type))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRUCT) {
        this.type = new Type();
        this.type.read(iprot);
        this.__isset.type = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_type_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.type != null) {
  field.name = "type";
  field.type = TType.STRUCT;
  field.id = 1;
  oprot.writeFieldBegin(field);
  this.type.write(oprot);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_type_args(");
sb.append("type:");
sb.append(this.type.toString());
sb.append(")");
return sb.toString();
}

}

public static class create_type_result implements TBase, java.io.Serializable {
private boolean success;
private AlreadyExistsException o1;
private InvalidObjectException o2;
private MetaException o3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
public boolean o3 = false;
}

public create_type_result() {
}

public create_type_result(
boolean success,
AlreadyExistsException o1,
InvalidObjectException o2,
MetaException o3)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
this.o3 = o3;
this.__isset.o3 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public AlreadyExistsException getO1() {
return this.o1;
}

public void setO1(AlreadyExistsException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public InvalidObjectException getO2() {
return this.o2;
}

public void setO2(InvalidObjectException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public MetaException getO3() {
return this.o3;
}

public void setO3(MetaException o3) {
this.o3 = o3;
this.__isset.o3 = true;
}

public void unsetO3() {
this.o3 = null;
this.__isset.o3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_type_result)
  return this.equals((create_type_result)that);
return false;
}

public boolean equals(create_type_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

boolean this_present_o3 = true && (this.o3 != null);
boolean that_present_o3 = true && (that.o3 != null);
if (this_present_o3 || that_present_o3) {
  if (!(this_present_o3 && that_present_o3))
    return false;
  if (!this.o3.equals(that.o3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new AlreadyExistsException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new InvalidObjectException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.STRUCT) {
        this.o3 = new MetaException();
        this.o3.read(iprot);
        this.__isset.o3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_type_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o3) {
  if (this.o3 != null) {
    field.name = "o3";
    field.type = TType.STRUCT;
    field.id = 3;
    oprot.writeFieldBegin(field);
    this.o3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_type_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(",o3:");
sb.append(this.o3.toString());
sb.append(")");
return sb.toString();
}

}

public static class drop_type_args implements TBase, java.io.Serializable {
private String type;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean type = false;
}

public drop_type_args() {
}

public drop_type_args(
String type)
{
this();
this.type = type;
this.__isset.type = true;
}

public String getType() {
return this.type;
}

public void setType(String type) {
this.type = type;
this.__isset.type = true;
}

public void unsetType() {
this.__isset.type = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_type_args)
  return this.equals((drop_type_args)that);
return false;
}

public boolean equals(drop_type_args that) {
if (that == null)
  return false;

boolean this_present_type = true && (this.type != null);
boolean that_present_type = true && (that.type != null);
if (this_present_type || that_present_type) {
  if (!(this_present_type && that_present_type))
    return false;
  if (!this.type.equals(that.type))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.type = iprot.readString();
        this.__isset.type = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_type_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.type != null) {
  field.name = "type";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.type);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_type_args(");
sb.append("type:");
sb.append(this.type);
sb.append(")");
return sb.toString();
}

}

public static class drop_type_result implements TBase, java.io.Serializable {
private boolean success;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o2 = false;
}

public drop_type_result() {
}

public drop_type_result(
boolean success,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_type_result)
  return this.equals((drop_type_result)that);
return false;
}

public boolean equals(drop_type_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_type_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_type_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_type_all_args implements TBase, java.io.Serializable {
private String name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean name = false;
}

public get_type_all_args() {
}

public get_type_all_args(
String name)
{
this();
this.name = name;
this.__isset.name = true;
}

public String getName() {
return this.name;
}

public void setName(String name) {
this.name = name;
this.__isset.name = true;
}

public void unsetName() {
this.__isset.name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_type_all_args)
  return this.equals((get_type_all_args)that);
return false;
}

public boolean equals(get_type_all_args that) {
if (that == null)
  return false;

boolean this_present_name = true && (this.name != null);
boolean that_present_name = true && (that.name != null);
if (this_present_name || that_present_name) {
  if (!(this_present_name && that_present_name))
    return false;
  if (!this.name.equals(that.name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.name = iprot.readString();
        this.__isset.name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_type_all_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.name != null) {
  field.name = "name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_type_all_args(");
sb.append("name:");
sb.append(this.name);
sb.append(")");
return sb.toString();
}

}

public static class get_type_all_result implements TBase, java.io.Serializable {
private Map<String,Type> success;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o2 = false;
}

public get_type_all_result() {
}

public get_type_all_result(
Map<String,Type> success,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public void putToSuccess(String key, Type val) {
if (this.success == null) {
  this.success = new HashMap<String,Type>();
}
this.success.put(key, val);
this.__isset.success = true;
}

public Map<String,Type> getSuccess() {
return this.success;
}

public void setSuccess(Map<String,Type> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_type_all_result)
  return this.equals((get_type_all_result)that);
return false;
}

public boolean equals(get_type_all_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.MAP) {
        {
          TMap _map52 = iprot.readMapBegin();
          this.success = new HashMap<String,Type>(2*_map52.size);
          for (int _i53 = 0; _i53 < _map52.size; ++_i53)
          {
            String _key54;
            Type _val55;
            _key54 = iprot.readString();
            _val55 = new Type();
            _val55.read(iprot);
            this.success.put(_key54, _val55);
          }
          iprot.readMapEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_type_all_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.MAP;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeMapBegin(new TMap(TType.STRING, TType.STRUCT, this.success.size()));
      for (String _iter56 : this.success.keySet())      {
        oprot.writeString(_iter56);
        this.success.get(_iter56).write(oprot);
      }
      oprot.writeMapEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_type_all_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_fields_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
}

public get_fields_args() {
}

public get_fields_args(
String db_name,
String table_name)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_fields_args)
  return this.equals((get_fields_args)that);
return false;
}

public boolean equals(get_fields_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_fields_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_fields_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(")");
return sb.toString();
}

}

public static class get_fields_result implements TBase, java.io.Serializable {
private List<FieldSchema> success;
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public get_fields_result() {
}

public get_fields_result(
List<FieldSchema> success,
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<FieldSchema> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(FieldSchema elem) {
if (this.success == null) {
  this.success = new ArrayList<FieldSchema>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<FieldSchema> getSuccess() {
return this.success;
}

public void setSuccess(List<FieldSchema> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_fields_result)
  return this.equals((get_fields_result)that);
return false;
}

public boolean equals(get_fields_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list57 = iprot.readListBegin();
          this.success = new ArrayList<FieldSchema>(_list57.size);
          for (int _i58 = 0; _i58 < _list57.size; ++_i58)
          {
            FieldSchema _elem59 = new FieldSchema();
            _elem59 = new FieldSchema();
            _elem59.read(iprot);
            this.success.add(_elem59);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_fields_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
      for (FieldSchema _iter60 : this.success)      {
        _iter60.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -3;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_fields_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class create_table_args implements TBase, java.io.Serializable {
private Table tbl;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean tbl = false;
}

public create_table_args() {
}

public create_table_args(
Table tbl)
{
this();
this.tbl = tbl;
this.__isset.tbl = true;
}

public Table getTbl() {
return this.tbl;
}

public void setTbl(Table tbl) {
this.tbl = tbl;
this.__isset.tbl = true;
}

public void unsetTbl() {
this.tbl = null;
this.__isset.tbl = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_table_args)
  return this.equals((create_table_args)that);
return false;
}

public boolean equals(create_table_args that) {
if (that == null)
  return false;

boolean this_present_tbl = true && (this.tbl != null);
boolean that_present_tbl = true && (that.tbl != null);
if (this_present_tbl || that_present_tbl) {
  if (!(this_present_tbl && that_present_tbl))
    return false;
  if (!this.tbl.equals(that.tbl))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRUCT) {
        this.tbl = new Table();
        this.tbl.read(iprot);
        this.__isset.tbl = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_table_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.tbl != null) {
  field.name = "tbl";
  field.type = TType.STRUCT;
  field.id = 1;
  oprot.writeFieldBegin(field);
  this.tbl.write(oprot);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_table_args(");
sb.append("tbl:");
sb.append(this.tbl.toString());
sb.append(")");
return sb.toString();
}

}

public static class create_table_result implements TBase, java.io.Serializable {
private AlreadyExistsException ouch1;
private InvalidObjectException ouch2;
private MetaException ouch3;
private NoSuchObjectException o4;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
public boolean o4 = false;
}

public create_table_result() {
}

public create_table_result(
AlreadyExistsException ouch1,
InvalidObjectException ouch2,
MetaException ouch3,
NoSuchObjectException o4)
{
this();
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
this.o4 = o4;
this.__isset.o4 = true;
}

public AlreadyExistsException getOuch1() {
return this.ouch1;
}

public void setOuch1(AlreadyExistsException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public InvalidObjectException getOuch2() {
return this.ouch2;
}

public void setOuch2(InvalidObjectException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public MetaException getOuch3() {
return this.ouch3;
}

public void setOuch3(MetaException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public NoSuchObjectException getO4() {
return this.o4;
}

public void setO4(NoSuchObjectException o4) {
this.o4 = o4;
this.__isset.o4 = true;
}

public void unsetO4() {
this.o4 = null;
this.__isset.o4 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_table_result)
  return this.equals((create_table_result)that);
return false;
}

public boolean equals(create_table_result that) {
if (that == null)
  return false;

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

boolean this_present_o4 = true && (this.o4 != null);
boolean that_present_o4 = true && (that.o4 != null);
if (this_present_o4 || that_present_o4) {
  if (!(this_present_o4 && that_present_o4))
    return false;
  if (!this.o4.equals(that.o4))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new AlreadyExistsException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new InvalidObjectException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new MetaException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 4:
      if (field.type == TType.STRUCT) {
        this.o4 = new NoSuchObjectException();
        this.o4.read(iprot);
        this.__isset.o4 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_table_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = 3;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o4) {
  if (this.o4 != null) {
    field.name = "o4";
    field.type = TType.STRUCT;
    field.id = 4;
    oprot.writeFieldBegin(field);
    this.o4.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_table_result(");
sb.append("ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(",o4:");
sb.append(this.o4.toString());
sb.append(")");
return sb.toString();
}

}

public static class drop_table_args implements TBase, java.io.Serializable {
private String dbname;
private String name;
private boolean deleteData;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean dbname = false;
public boolean name = false;
public boolean deleteData = false;
}

public drop_table_args() {
}

public drop_table_args(
String dbname,
String name,
boolean deleteData)
{
this();
this.dbname = dbname;
this.__isset.dbname = true;
this.name = name;
this.__isset.name = true;
this.deleteData = deleteData;
this.__isset.deleteData = true;
}

public String getDbname() {
return this.dbname;
}

public void setDbname(String dbname) {
this.dbname = dbname;
this.__isset.dbname = true;
}

public void unsetDbname() {
this.__isset.dbname = false;
}

public String getName() {
return this.name;
}

public void setName(String name) {
this.name = name;
this.__isset.name = true;
}

public void unsetName() {
this.__isset.name = false;
}

public boolean isDeleteData() {
return this.deleteData;
}

public void setDeleteData(boolean deleteData) {
this.deleteData = deleteData;
this.__isset.deleteData = true;
}

public void unsetDeleteData() {
this.__isset.deleteData = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_table_args)
  return this.equals((drop_table_args)that);
return false;
}

public boolean equals(drop_table_args that) {
if (that == null)
  return false;

boolean this_present_dbname = true && (this.dbname != null);
boolean that_present_dbname = true && (that.dbname != null);
if (this_present_dbname || that_present_dbname) {
  if (!(this_present_dbname && that_present_dbname))
    return false;
  if (!this.dbname.equals(that.dbname))
    return false;
}

boolean this_present_name = true && (this.name != null);
boolean that_present_name = true && (that.name != null);
if (this_present_name || that_present_name) {
  if (!(this_present_name && that_present_name))
    return false;
  if (!this.name.equals(that.name))
    return false;
}

boolean this_present_deleteData = true;
boolean that_present_deleteData = true;
if (this_present_deleteData || that_present_deleteData) {
  if (!(this_present_deleteData && that_present_deleteData))
    return false;
  if (this.deleteData != that.deleteData)
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.dbname = iprot.readString();
        this.__isset.dbname = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.name = iprot.readString();
        this.__isset.name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.BOOL) {
        this.deleteData = iprot.readBool();
        this.__isset.deleteData = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_table_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.dbname != null) {
  field.name = "dbname";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.dbname);
  oprot.writeFieldEnd();
}
if (this.name != null) {
  field.name = "name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.name);
  oprot.writeFieldEnd();
}
field.name = "deleteData";
field.type = TType.BOOL;
field.id = 3;
oprot.writeFieldBegin(field);
oprot.writeBool(this.deleteData);
oprot.writeFieldEnd();
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_table_args(");
sb.append("dbname:");
sb.append(this.dbname);
sb.append(",name:");
sb.append(this.name);
sb.append(",deleteData:");
sb.append(this.deleteData);
sb.append(")");
return sb.toString();
}

}

public static class drop_table_result implements TBase, java.io.Serializable {
private NoSuchObjectException o1;
private MetaException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean o1 = false;
public boolean ouch3 = false;
}

public drop_table_result() {
}

public drop_table_result(
NoSuchObjectException o1,
MetaException ouch3)
{
this();
this.o1 = o1;
this.__isset.o1 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public NoSuchObjectException getO1() {
return this.o1;
}

public void setO1(NoSuchObjectException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getOuch3() {
return this.ouch3;
}

public void setOuch3(MetaException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_table_result)
  return this.equals((drop_table_result)that);
return false;
}

public boolean equals(drop_table_result that) {
if (that == null)
  return false;

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new NoSuchObjectException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new MetaException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_table_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_table_result(");
sb.append("o1:");
sb.append(this.o1.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_tables_args implements TBase, java.io.Serializable {
private String db_name;
private String pattern;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean pattern = false;
}

public get_tables_args() {
}

public get_tables_args(
String db_name,
String pattern)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.pattern = pattern;
this.__isset.pattern = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getPattern() {
return this.pattern;
}

public void setPattern(String pattern) {
this.pattern = pattern;
this.__isset.pattern = true;
}

public void unsetPattern() {
this.__isset.pattern = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_tables_args)
  return this.equals((get_tables_args)that);
return false;
}

public boolean equals(get_tables_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_pattern = true && (this.pattern != null);
boolean that_present_pattern = true && (that.pattern != null);
if (this_present_pattern || that_present_pattern) {
  if (!(this_present_pattern && that_present_pattern))
    return false;
  if (!this.pattern.equals(that.pattern))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case -1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRING) {
        this.pattern = iprot.readString();
        this.__isset.pattern = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_tables_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = -1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.pattern != null) {
  field.name = "pattern";
  field.type = TType.STRING;
  field.id = -2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.pattern);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_tables_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",pattern:");
sb.append(this.pattern);
sb.append(")");
return sb.toString();
}

}

public static class get_tables_result implements TBase, java.io.Serializable {
private List<String> success;
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public get_tables_result() {
}

public get_tables_result(
List<String> success,
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<String> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(String elem) {
if (this.success == null) {
  this.success = new ArrayList<String>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<String> getSuccess() {
return this.success;
}

public void setSuccess(List<String> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_tables_result)
  return this.equals((get_tables_result)that);
return false;
}

public boolean equals(get_tables_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list61 = iprot.readListBegin();
          this.success = new ArrayList<String>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            String _elem63 = null;
            _elem63 = iprot.readString();
            this.success.add(_elem63);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -5:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_tables_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
      for (String _iter64 : this.success)      {
        oprot.writeString(_iter64);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -3;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -5;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_tables_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_table_args implements TBase, java.io.Serializable {
private String dbname;
private String tbl_name;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean dbname = false;
public boolean tbl_name = false;
}

public get_table_args() {
}

public get_table_args(
String dbname,
String tbl_name)
{
this();
this.dbname = dbname;
this.__isset.dbname = true;
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
}

public String getDbname() {
return this.dbname;
}

public void setDbname(String dbname) {
this.dbname = dbname;
this.__isset.dbname = true;
}

public void unsetDbname() {
this.__isset.dbname = false;
}

public String getTbl_name() {
return this.tbl_name;
}

public void setTbl_name(String tbl_name) {
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
}

public void unsetTbl_name() {
this.__isset.tbl_name = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_table_args)
  return this.equals((get_table_args)that);
return false;
}

public boolean equals(get_table_args that) {
if (that == null)
  return false;

boolean this_present_dbname = true && (this.dbname != null);
boolean that_present_dbname = true && (that.dbname != null);
if (this_present_dbname || that_present_dbname) {
  if (!(this_present_dbname && that_present_dbname))
    return false;
  if (!this.dbname.equals(that.dbname))
    return false;
}

boolean this_present_tbl_name = true && (this.tbl_name != null);
boolean that_present_tbl_name = true && (that.tbl_name != null);
if (this_present_tbl_name || that_present_tbl_name) {
  if (!(this_present_tbl_name && that_present_tbl_name))
    return false;
  if (!this.tbl_name.equals(that.tbl_name))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.dbname = iprot.readString();
        this.__isset.dbname = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.tbl_name = iprot.readString();
        this.__isset.tbl_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_table_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.dbname != null) {
  field.name = "dbname";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.dbname);
  oprot.writeFieldEnd();
}
if (this.tbl_name != null) {
  field.name = "tbl_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.tbl_name);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_table_args(");
sb.append("dbname:");
sb.append(this.dbname);
sb.append(",tbl_name:");
sb.append(this.tbl_name);
sb.append(")");
return sb.toString();
}

}

public static class get_table_result implements TBase, java.io.Serializable {
private Table success;
private MetaException o1;
private NoSuchObjectException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
}

public get_table_result() {
}

public get_table_result(
Table success,
MetaException o1,
NoSuchObjectException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public Table getSuccess() {
return this.success;
}

public void setSuccess(Table success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getO1() {
return this.o1;
}

public void setO1(MetaException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public NoSuchObjectException getO2() {
return this.o2;
}

public void setO2(NoSuchObjectException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_table_result)
  return this.equals((get_table_result)that);
return false;
}

public boolean equals(get_table_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.STRUCT) {
        this.success = new Table();
        this.success.read(iprot);
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new MetaException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new NoSuchObjectException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_table_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.STRUCT;
    field.id = 0;
    oprot.writeFieldBegin(field);
    this.success.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_table_result(");
sb.append("success:");
sb.append(this.success.toString());
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class set_table_parameters_args implements TBase, java.io.Serializable {
private String dbname;
private String tbl_name;
private Map<String,String> params;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean dbname = false;
public boolean tbl_name = false;
public boolean params = false;
}

public set_table_parameters_args() {
}

public set_table_parameters_args(
String dbname,
String tbl_name,
Map<String,String> params)
{
this();
this.dbname = dbname;
this.__isset.dbname = true;
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
this.params = params;
this.__isset.params = true;
}

public String getDbname() {
return this.dbname;
}

public void setDbname(String dbname) {
this.dbname = dbname;
this.__isset.dbname = true;
}

public void unsetDbname() {
this.__isset.dbname = false;
}

public String getTbl_name() {
return this.tbl_name;
}

public void setTbl_name(String tbl_name) {
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
}

public void unsetTbl_name() {
this.__isset.tbl_name = false;
}

public int getParamsSize() {
return (this.params == null) ? 0 : this.params.size();
}

public void putToParams(String key, String val) {
if (this.params == null) {
  this.params = new HashMap<String,String>();
}
this.params.put(key, val);
this.__isset.params = true;
}

public Map<String,String> getParams() {
return this.params;
}

public void setParams(Map<String,String> params) {
this.params = params;
this.__isset.params = true;
}

public void unsetParams() {
this.params = null;
this.__isset.params = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof set_table_parameters_args)
  return this.equals((set_table_parameters_args)that);
return false;
}

public boolean equals(set_table_parameters_args that) {
if (that == null)
  return false;

boolean this_present_dbname = true && (this.dbname != null);
boolean that_present_dbname = true && (that.dbname != null);
if (this_present_dbname || that_present_dbname) {
  if (!(this_present_dbname && that_present_dbname))
    return false;
  if (!this.dbname.equals(that.dbname))
    return false;
}

boolean this_present_tbl_name = true && (this.tbl_name != null);
boolean that_present_tbl_name = true && (that.tbl_name != null);
if (this_present_tbl_name || that_present_tbl_name) {
  if (!(this_present_tbl_name && that_present_tbl_name))
    return false;
  if (!this.tbl_name.equals(that.tbl_name))
    return false;
}

boolean this_present_params = true && (this.params != null);
boolean that_present_params = true && (that.params != null);
if (this_present_params || that_present_params) {
  if (!(this_present_params && that_present_params))
    return false;
  if (!this.params.equals(that.params))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.dbname = iprot.readString();
        this.__isset.dbname = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.tbl_name = iprot.readString();
        this.__isset.tbl_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.MAP) {
        {
          TMap _map65 = iprot.readMapBegin();
          this.params = new HashMap<String,String>(2*_map65.size);
          for (int _i66 = 0; _i66 < _map65.size; ++_i66)
          {
            String _key67;
            String _val68;
            _key67 = iprot.readString();
            _val68 = iprot.readString();
            this.params.put(_key67, _val68);
          }
          iprot.readMapEnd();
        }
        this.__isset.params = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("set_table_parameters_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.dbname != null) {
  field.name = "dbname";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.dbname);
  oprot.writeFieldEnd();
}
if (this.tbl_name != null) {
  field.name = "tbl_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.tbl_name);
  oprot.writeFieldEnd();
}
if (this.params != null) {
  field.name = "params";
  field.type = TType.MAP;
  field.id = 3;
  oprot.writeFieldBegin(field);
  {
    oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.params.size()));
    for (String _iter69 : this.params.keySet())    {
      oprot.writeString(_iter69);
      oprot.writeString(this.params.get(_iter69));
    }
    oprot.writeMapEnd();
  }
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("set_table_parameters_args(");
sb.append("dbname:");
sb.append(this.dbname);
sb.append(",tbl_name:");
sb.append(this.tbl_name);
sb.append(",params:");
sb.append(this.params);
sb.append(")");
return sb.toString();
}

}

public static class set_table_parameters_result implements TBase, java.io.Serializable {
private boolean success;
private NoSuchObjectException o1;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
}

public set_table_parameters_result() {
}

public set_table_parameters_result(
boolean success,
NoSuchObjectException o1,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public NoSuchObjectException getO1() {
return this.o1;
}

public void setO1(NoSuchObjectException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof set_table_parameters_result)
  return this.equals((set_table_parameters_result)that);
return false;
}

public boolean equals(set_table_parameters_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new NoSuchObjectException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("set_table_parameters_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("set_table_parameters_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class alter_table_args implements TBase, java.io.Serializable {
private String dbname;
private String tbl_name;
private Table new_tbl;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean dbname = false;
public boolean tbl_name = false;
public boolean new_tbl = false;
}

public alter_table_args() {
}

public alter_table_args(
String dbname,
String tbl_name,
Table new_tbl)
{
this();
this.dbname = dbname;
this.__isset.dbname = true;
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
this.new_tbl = new_tbl;
this.__isset.new_tbl = true;
}

public String getDbname() {
return this.dbname;
}

public void setDbname(String dbname) {
this.dbname = dbname;
this.__isset.dbname = true;
}

public void unsetDbname() {
this.__isset.dbname = false;
}

public String getTbl_name() {
return this.tbl_name;
}

public void setTbl_name(String tbl_name) {
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
}

public void unsetTbl_name() {
this.__isset.tbl_name = false;
}

public Table getNew_tbl() {
return this.new_tbl;
}

public void setNew_tbl(Table new_tbl) {
this.new_tbl = new_tbl;
this.__isset.new_tbl = true;
}

public void unsetNew_tbl() {
this.new_tbl = null;
this.__isset.new_tbl = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof alter_table_args)
  return this.equals((alter_table_args)that);
return false;
}

public boolean equals(alter_table_args that) {
if (that == null)
  return false;

boolean this_present_dbname = true && (this.dbname != null);
boolean that_present_dbname = true && (that.dbname != null);
if (this_present_dbname || that_present_dbname) {
  if (!(this_present_dbname && that_present_dbname))
    return false;
  if (!this.dbname.equals(that.dbname))
    return false;
}

boolean this_present_tbl_name = true && (this.tbl_name != null);
boolean that_present_tbl_name = true && (that.tbl_name != null);
if (this_present_tbl_name || that_present_tbl_name) {
  if (!(this_present_tbl_name && that_present_tbl_name))
    return false;
  if (!this.tbl_name.equals(that.tbl_name))
    return false;
}

boolean this_present_new_tbl = true && (this.new_tbl != null);
boolean that_present_new_tbl = true && (that.new_tbl != null);
if (this_present_new_tbl || that_present_new_tbl) {
  if (!(this_present_new_tbl && that_present_new_tbl))
    return false;
  if (!this.new_tbl.equals(that.new_tbl))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.dbname = iprot.readString();
        this.__isset.dbname = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.tbl_name = iprot.readString();
        this.__isset.tbl_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.STRUCT) {
        this.new_tbl = new Table();
        this.new_tbl.read(iprot);
        this.__isset.new_tbl = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("alter_table_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.dbname != null) {
  field.name = "dbname";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.dbname);
  oprot.writeFieldEnd();
}
if (this.tbl_name != null) {
  field.name = "tbl_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.tbl_name);
  oprot.writeFieldEnd();
}
if (this.new_tbl != null) {
  field.name = "new_tbl";
  field.type = TType.STRUCT;
  field.id = 3;
  oprot.writeFieldBegin(field);
  this.new_tbl.write(oprot);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("alter_table_args(");
sb.append("dbname:");
sb.append(this.dbname);
sb.append(",tbl_name:");
sb.append(this.tbl_name);
sb.append(",new_tbl:");
sb.append(this.new_tbl.toString());
sb.append(")");
return sb.toString();
}

}

public static class alter_table_result implements TBase, java.io.Serializable {
private InvalidOperationException o1;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean o1 = false;
public boolean o2 = false;
}

public alter_table_result() {
}

public alter_table_result(
InvalidOperationException o1,
MetaException o2)
{
this();
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public InvalidOperationException getO1() {
return this.o1;
}

public void setO1(InvalidOperationException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof alter_table_result)
  return this.equals((alter_table_result)that);
return false;
}

public boolean equals(alter_table_result that) {
if (that == null)
  return false;

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new InvalidOperationException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("alter_table_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("alter_table_result(");
sb.append("o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class truncate_table_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;
private String partition;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
public boolean partition = false;
}

public truncate_table_args() {
}

public truncate_table_args(
String db_name,
String table_name,
String partition)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
this.partition = partition;
this.__isset.partition = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public String getPartition() {
return this.partition;
}

public void setPartition(String partition) {
this.partition = partition;
this.__isset.partition = true;
}

public void unsetPartition() {
this.__isset.partition = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof truncate_table_args)
  return this.equals((truncate_table_args)that);
return false;
}

public boolean equals(truncate_table_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

boolean this_present_partition = true && (this.partition != null);
boolean that_present_partition = true && (that.partition != null);
if (this_present_partition || that_present_partition) {
  if (!(this_present_partition && that_present_partition))
    return false;
  if (!this.partition.equals(that.partition))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.STRING) {
        this.partition = iprot.readString();
        this.__isset.partition = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("truncate_table_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
if (this.partition != null) {
  field.name = "partition";
  field.type = TType.STRING;
  field.id = 3;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.partition);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("truncate_table_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(",partition:");
sb.append(this.partition);
sb.append(")");
return sb.toString();
}

}

public static class truncate_table_result implements TBase, java.io.Serializable {
private MetaException ouch1;
private UnknownTableException ouch2;
private UnknownDBException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public truncate_table_result() {
}

public truncate_table_result(
MetaException ouch1,
UnknownTableException ouch2,
UnknownDBException ouch3)
{
this();
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownTableException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownTableException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownDBException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownDBException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof truncate_table_result)
  return this.equals((truncate_table_result)that);
return false;
}

public boolean equals(truncate_table_result that) {
if (that == null)
  return false;

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownTableException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownDBException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("truncate_table_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = 3;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("truncate_table_result(");
sb.append("ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class cat_args implements TBase, java.io.Serializable {
private String db_name;
private String table_name;
private String partition;
private int high;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean table_name = false;
public boolean partition = false;
public boolean high = false;
}

public cat_args() {
}

public cat_args(
String db_name,
String table_name,
String partition,
int high)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.table_name = table_name;
this.__isset.table_name = true;
this.partition = partition;
this.__isset.partition = true;
this.high = high;
this.__isset.high = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTable_name() {
return this.table_name;
}

public void setTable_name(String table_name) {
this.table_name = table_name;
this.__isset.table_name = true;
}

public void unsetTable_name() {
this.__isset.table_name = false;
}

public String getPartition() {
return this.partition;
}

public void setPartition(String partition) {
this.partition = partition;
this.__isset.partition = true;
}

public void unsetPartition() {
this.__isset.partition = false;
}

public int getHigh() {
return this.high;
}

public void setHigh(int high) {
this.high = high;
this.__isset.high = true;
}

public void unsetHigh() {
this.__isset.high = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof cat_args)
  return this.equals((cat_args)that);
return false;
}

public boolean equals(cat_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_table_name = true && (this.table_name != null);
boolean that_present_table_name = true && (that.table_name != null);
if (this_present_table_name || that_present_table_name) {
  if (!(this_present_table_name && that_present_table_name))
    return false;
  if (!this.table_name.equals(that.table_name))
    return false;
}

boolean this_present_partition = true && (this.partition != null);
boolean that_present_partition = true && (that.partition != null);
if (this_present_partition || that_present_partition) {
  if (!(this_present_partition && that_present_partition))
    return false;
  if (!this.partition.equals(that.partition))
    return false;
}

boolean this_present_high = true;
boolean that_present_high = true;
if (this_present_high || that_present_high) {
  if (!(this_present_high && that_present_high))
    return false;
  if (this.high != that.high)
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.table_name = iprot.readString();
        this.__isset.table_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.STRING) {
        this.partition = iprot.readString();
        this.__isset.partition = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -1:
      if (field.type == TType.I32) {
        this.high = iprot.readI32();
        this.__isset.high = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("cat_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.table_name != null) {
  field.name = "table_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.table_name);
  oprot.writeFieldEnd();
}
if (this.partition != null) {
  field.name = "partition";
  field.type = TType.STRING;
  field.id = 3;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.partition);
  oprot.writeFieldEnd();
}
field.name = "high";
field.type = TType.I32;
field.id = -1;
oprot.writeFieldBegin(field);
oprot.writeI32(this.high);
oprot.writeFieldEnd();
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("cat_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",table_name:");
sb.append(this.table_name);
sb.append(",partition:");
sb.append(this.partition);
sb.append(",high:");
sb.append(this.high);
sb.append(")");
return sb.toString();
}

}

public static class cat_result implements TBase, java.io.Serializable {
private List<String> success;
private MetaException ouch1;
private UnknownDBException ouch2;
private UnknownTableException ouch3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean ouch1 = false;
public boolean ouch2 = false;
public boolean ouch3 = false;
}

public cat_result() {
}

public cat_result(
List<String> success,
MetaException ouch1,
UnknownDBException ouch2,
UnknownTableException ouch3)
{
this();
this.success = success;
this.__isset.success = true;
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<String> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(String elem) {
if (this.success == null) {
  this.success = new ArrayList<String>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<String> getSuccess() {
return this.success;
}

public void setSuccess(List<String> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getOuch1() {
return this.ouch1;
}

public void setOuch1(MetaException ouch1) {
this.ouch1 = ouch1;
this.__isset.ouch1 = true;
}

public void unsetOuch1() {
this.ouch1 = null;
this.__isset.ouch1 = false;
}

public UnknownDBException getOuch2() {
return this.ouch2;
}

public void setOuch2(UnknownDBException ouch2) {
this.ouch2 = ouch2;
this.__isset.ouch2 = true;
}

public void unsetOuch2() {
this.ouch2 = null;
this.__isset.ouch2 = false;
}

public UnknownTableException getOuch3() {
return this.ouch3;
}

public void setOuch3(UnknownTableException ouch3) {
this.ouch3 = ouch3;
this.__isset.ouch3 = true;
}

public void unsetOuch3() {
this.ouch3 = null;
this.__isset.ouch3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof cat_result)
  return this.equals((cat_result)that);
return false;
}

public boolean equals(cat_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_ouch1 = true && (this.ouch1 != null);
boolean that_present_ouch1 = true && (that.ouch1 != null);
if (this_present_ouch1 || that_present_ouch1) {
  if (!(this_present_ouch1 && that_present_ouch1))
    return false;
  if (!this.ouch1.equals(that.ouch1))
    return false;
}

boolean this_present_ouch2 = true && (this.ouch2 != null);
boolean that_present_ouch2 = true && (that.ouch2 != null);
if (this_present_ouch2 || that_present_ouch2) {
  if (!(this_present_ouch2 && that_present_ouch2))
    return false;
  if (!this.ouch2.equals(that.ouch2))
    return false;
}

boolean this_present_ouch3 = true && (this.ouch3 != null);
boolean that_present_ouch3 = true && (that.ouch3 != null);
if (this_present_ouch3 || that_present_ouch3) {
  if (!(this_present_ouch3 && that_present_ouch3))
    return false;
  if (!this.ouch3.equals(that.ouch3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list70 = iprot.readListBegin();
          this.success = new ArrayList<String>(_list70.size);
          for (int _i71 = 0; _i71 < _list70.size; ++_i71)
          {
            String _elem72 = null;
            _elem72 = iprot.readString();
            this.success.add(_elem72);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -2:
      if (field.type == TType.STRUCT) {
        this.ouch1 = new MetaException();
        this.ouch1.read(iprot);
        this.__isset.ouch1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -3:
      if (field.type == TType.STRUCT) {
        this.ouch2 = new UnknownDBException();
        this.ouch2.read(iprot);
        this.__isset.ouch2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case -4:
      if (field.type == TType.STRUCT) {
        this.ouch3 = new UnknownTableException();
        this.ouch3.read(iprot);
        this.__isset.ouch3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("cat_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRING, this.success.size()));
      for (String _iter73 : this.success)      {
        oprot.writeString(_iter73);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch1) {
  if (this.ouch1 != null) {
    field.name = "ouch1";
    field.type = TType.STRUCT;
    field.id = -2;
    oprot.writeFieldBegin(field);
    this.ouch1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch2) {
  if (this.ouch2 != null) {
    field.name = "ouch2";
    field.type = TType.STRUCT;
    field.id = -3;
    oprot.writeFieldBegin(field);
    this.ouch2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.ouch3) {
  if (this.ouch3 != null) {
    field.name = "ouch3";
    field.type = TType.STRUCT;
    field.id = -4;
    oprot.writeFieldBegin(field);
    this.ouch3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("cat_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",ouch1:");
sb.append(this.ouch1.toString());
sb.append(",ouch2:");
sb.append(this.ouch2.toString());
sb.append(",ouch3:");
sb.append(this.ouch3.toString());
sb.append(")");
return sb.toString();
}

}

public static class add_partition_args implements TBase, java.io.Serializable {
private Partition new_part;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean new_part = false;
}

public add_partition_args() {
}

public add_partition_args(
Partition new_part)
{
this();
this.new_part = new_part;
this.__isset.new_part = true;
}

public Partition getNew_part() {
return this.new_part;
}

public void setNew_part(Partition new_part) {
this.new_part = new_part;
this.__isset.new_part = true;
}

public void unsetNew_part() {
this.new_part = null;
this.__isset.new_part = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof add_partition_args)
  return this.equals((add_partition_args)that);
return false;
}

public boolean equals(add_partition_args that) {
if (that == null)
  return false;

boolean this_present_new_part = true && (this.new_part != null);
boolean that_present_new_part = true && (that.new_part != null);
if (this_present_new_part || that_present_new_part) {
  if (!(this_present_new_part && that_present_new_part))
    return false;
  if (!this.new_part.equals(that.new_part))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRUCT) {
        this.new_part = new Partition();
        this.new_part.read(iprot);
        this.__isset.new_part = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("add_partition_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.new_part != null) {
  field.name = "new_part";
  field.type = TType.STRUCT;
  field.id = 1;
  oprot.writeFieldBegin(field);
  this.new_part.write(oprot);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("add_partition_args(");
sb.append("new_part:");
sb.append(this.new_part.toString());
sb.append(")");
return sb.toString();
}

}

public static class add_partition_result implements TBase, java.io.Serializable {
private Partition success;
private InvalidObjectException o1;
private AlreadyExistsException o2;
private MetaException o3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
public boolean o3 = false;
}

public add_partition_result() {
}

public add_partition_result(
Partition success,
InvalidObjectException o1,
AlreadyExistsException o2,
MetaException o3)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
this.o3 = o3;
this.__isset.o3 = true;
}

public Partition getSuccess() {
return this.success;
}

public void setSuccess(Partition success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public InvalidObjectException getO1() {
return this.o1;
}

public void setO1(InvalidObjectException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public AlreadyExistsException getO2() {
return this.o2;
}

public void setO2(AlreadyExistsException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public MetaException getO3() {
return this.o3;
}

public void setO3(MetaException o3) {
this.o3 = o3;
this.__isset.o3 = true;
}

public void unsetO3() {
this.o3 = null;
this.__isset.o3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof add_partition_result)
  return this.equals((add_partition_result)that);
return false;
}

public boolean equals(add_partition_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

boolean this_present_o3 = true && (this.o3 != null);
boolean that_present_o3 = true && (that.o3 != null);
if (this_present_o3 || that_present_o3) {
  if (!(this_present_o3 && that_present_o3))
    return false;
  if (!this.o3.equals(that.o3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.STRUCT) {
        this.success = new Partition();
        this.success.read(iprot);
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new InvalidObjectException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new AlreadyExistsException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.STRUCT) {
        this.o3 = new MetaException();
        this.o3.read(iprot);
        this.__isset.o3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("add_partition_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.STRUCT;
    field.id = 0;
    oprot.writeFieldBegin(field);
    this.success.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o3) {
  if (this.o3 != null) {
    field.name = "o3";
    field.type = TType.STRUCT;
    field.id = 3;
    oprot.writeFieldBegin(field);
    this.o3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("add_partition_result(");
sb.append("success:");
sb.append(this.success.toString());
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(",o3:");
sb.append(this.o3.toString());
sb.append(")");
return sb.toString();
}

}

public static class append_partition_args implements TBase, java.io.Serializable {
private String db_name;
private String tbl_name;
private List<String> part_vals;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean tbl_name = false;
public boolean part_vals = false;
}

public append_partition_args() {
}

public append_partition_args(
String db_name,
String tbl_name,
List<String> part_vals)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
this.part_vals = part_vals;
this.__isset.part_vals = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTbl_name() {
return this.tbl_name;
}

public void setTbl_name(String tbl_name) {
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
}

public void unsetTbl_name() {
this.__isset.tbl_name = false;
}

public int getPart_valsSize() {
return (this.part_vals == null) ? 0 : this.part_vals.size();
}

public java.util.Iterator<String> getPart_valsIterator() {
return (this.part_vals == null) ? null : this.part_vals.iterator();
}

public void addToPart_vals(String elem) {
if (this.part_vals == null) {
  this.part_vals = new ArrayList<String>();
}
this.part_vals.add(elem);
this.__isset.part_vals = true;
}

public List<String> getPart_vals() {
return this.part_vals;
}

public void setPart_vals(List<String> part_vals) {
this.part_vals = part_vals;
this.__isset.part_vals = true;
}

public void unsetPart_vals() {
this.part_vals = null;
this.__isset.part_vals = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof append_partition_args)
  return this.equals((append_partition_args)that);
return false;
}

public boolean equals(append_partition_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_tbl_name = true && (this.tbl_name != null);
boolean that_present_tbl_name = true && (that.tbl_name != null);
if (this_present_tbl_name || that_present_tbl_name) {
  if (!(this_present_tbl_name && that_present_tbl_name))
    return false;
  if (!this.tbl_name.equals(that.tbl_name))
    return false;
}

boolean this_present_part_vals = true && (this.part_vals != null);
boolean that_present_part_vals = true && (that.part_vals != null);
if (this_present_part_vals || that_present_part_vals) {
  if (!(this_present_part_vals && that_present_part_vals))
    return false;
  if (!this.part_vals.equals(that.part_vals))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.tbl_name = iprot.readString();
        this.__isset.tbl_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.LIST) {
        {
          TList _list74 = iprot.readListBegin();
          this.part_vals = new ArrayList<String>(_list74.size);
          for (int _i75 = 0; _i75 < _list74.size; ++_i75)
          {
            String _elem76 = null;
            _elem76 = iprot.readString();
            this.part_vals.add(_elem76);
          }
          iprot.readListEnd();
        }
        this.__isset.part_vals = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("append_partition_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.tbl_name != null) {
  field.name = "tbl_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.tbl_name);
  oprot.writeFieldEnd();
}
if (this.part_vals != null) {
  field.name = "part_vals";
  field.type = TType.LIST;
  field.id = 3;
  oprot.writeFieldBegin(field);
  {
    oprot.writeListBegin(new TList(TType.STRING, this.part_vals.size()));
    for (String _iter77 : this.part_vals)    {
      oprot.writeString(_iter77);
    }
    oprot.writeListEnd();
  }
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("append_partition_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",tbl_name:");
sb.append(this.tbl_name);
sb.append(",part_vals:");
sb.append(this.part_vals);
sb.append(")");
return sb.toString();
}

}

public static class append_partition_result implements TBase, java.io.Serializable {
private Partition success;
private InvalidObjectException o1;
private AlreadyExistsException o2;
private MetaException o3;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
public boolean o3 = false;
}

public append_partition_result() {
}

public append_partition_result(
Partition success,
InvalidObjectException o1,
AlreadyExistsException o2,
MetaException o3)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
this.o3 = o3;
this.__isset.o3 = true;
}

public Partition getSuccess() {
return this.success;
}

public void setSuccess(Partition success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public InvalidObjectException getO1() {
return this.o1;
}

public void setO1(InvalidObjectException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public AlreadyExistsException getO2() {
return this.o2;
}

public void setO2(AlreadyExistsException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public MetaException getO3() {
return this.o3;
}

public void setO3(MetaException o3) {
this.o3 = o3;
this.__isset.o3 = true;
}

public void unsetO3() {
this.o3 = null;
this.__isset.o3 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof append_partition_result)
  return this.equals((append_partition_result)that);
return false;
}

public boolean equals(append_partition_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

boolean this_present_o3 = true && (this.o3 != null);
boolean that_present_o3 = true && (that.o3 != null);
if (this_present_o3 || that_present_o3) {
  if (!(this_present_o3 && that_present_o3))
    return false;
  if (!this.o3.equals(that.o3))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.STRUCT) {
        this.success = new Partition();
        this.success.read(iprot);
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new InvalidObjectException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new AlreadyExistsException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.STRUCT) {
        this.o3 = new MetaException();
        this.o3.read(iprot);
        this.__isset.o3 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("append_partition_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.STRUCT;
    field.id = 0;
    oprot.writeFieldBegin(field);
    this.success.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o3) {
  if (this.o3 != null) {
    field.name = "o3";
    field.type = TType.STRUCT;
    field.id = 3;
    oprot.writeFieldBegin(field);
    this.o3.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("append_partition_result(");
sb.append("success:");
sb.append(this.success.toString());
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(",o3:");
sb.append(this.o3.toString());
sb.append(")");
return sb.toString();
}

}

public static class drop_partition_args implements TBase, java.io.Serializable {
private String db_name;
private String tbl_name;
private List<String> part_vals;
private boolean deleteData;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean tbl_name = false;
public boolean part_vals = false;
public boolean deleteData = false;
}

public drop_partition_args() {
}

public drop_partition_args(
String db_name,
String tbl_name,
List<String> part_vals,
boolean deleteData)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
this.part_vals = part_vals;
this.__isset.part_vals = true;
this.deleteData = deleteData;
this.__isset.deleteData = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTbl_name() {
return this.tbl_name;
}

public void setTbl_name(String tbl_name) {
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
}

public void unsetTbl_name() {
this.__isset.tbl_name = false;
}

public int getPart_valsSize() {
return (this.part_vals == null) ? 0 : this.part_vals.size();
}

public java.util.Iterator<String> getPart_valsIterator() {
return (this.part_vals == null) ? null : this.part_vals.iterator();
}

public void addToPart_vals(String elem) {
if (this.part_vals == null) {
  this.part_vals = new ArrayList<String>();
}
this.part_vals.add(elem);
this.__isset.part_vals = true;
}

public List<String> getPart_vals() {
return this.part_vals;
}

public void setPart_vals(List<String> part_vals) {
this.part_vals = part_vals;
this.__isset.part_vals = true;
}

public void unsetPart_vals() {
this.part_vals = null;
this.__isset.part_vals = false;
}

public boolean isDeleteData() {
return this.deleteData;
}

public void setDeleteData(boolean deleteData) {
this.deleteData = deleteData;
this.__isset.deleteData = true;
}

public void unsetDeleteData() {
this.__isset.deleteData = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_partition_args)
  return this.equals((drop_partition_args)that);
return false;
}

public boolean equals(drop_partition_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_tbl_name = true && (this.tbl_name != null);
boolean that_present_tbl_name = true && (that.tbl_name != null);
if (this_present_tbl_name || that_present_tbl_name) {
  if (!(this_present_tbl_name && that_present_tbl_name))
    return false;
  if (!this.tbl_name.equals(that.tbl_name))
    return false;
}

boolean this_present_part_vals = true && (this.part_vals != null);
boolean that_present_part_vals = true && (that.part_vals != null);
if (this_present_part_vals || that_present_part_vals) {
  if (!(this_present_part_vals && that_present_part_vals))
    return false;
  if (!this.part_vals.equals(that.part_vals))
    return false;
}

boolean this_present_deleteData = true;
boolean that_present_deleteData = true;
if (this_present_deleteData || that_present_deleteData) {
  if (!(this_present_deleteData && that_present_deleteData))
    return false;
  if (this.deleteData != that.deleteData)
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.tbl_name = iprot.readString();
        this.__isset.tbl_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.LIST) {
        {
          TList _list78 = iprot.readListBegin();
          this.part_vals = new ArrayList<String>(_list78.size);
          for (int _i79 = 0; _i79 < _list78.size; ++_i79)
          {
            String _elem80 = null;
            _elem80 = iprot.readString();
            this.part_vals.add(_elem80);
          }
          iprot.readListEnd();
        }
        this.__isset.part_vals = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 4:
      if (field.type == TType.BOOL) {
        this.deleteData = iprot.readBool();
        this.__isset.deleteData = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_partition_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.tbl_name != null) {
  field.name = "tbl_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.tbl_name);
  oprot.writeFieldEnd();
}
if (this.part_vals != null) {
  field.name = "part_vals";
  field.type = TType.LIST;
  field.id = 3;
  oprot.writeFieldBegin(field);
  {
    oprot.writeListBegin(new TList(TType.STRING, this.part_vals.size()));
    for (String _iter81 : this.part_vals)    {
      oprot.writeString(_iter81);
    }
    oprot.writeListEnd();
  }
  oprot.writeFieldEnd();
}
field.name = "deleteData";
field.type = TType.BOOL;
field.id = 4;
oprot.writeFieldBegin(field);
oprot.writeBool(this.deleteData);
oprot.writeFieldEnd();
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_partition_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",tbl_name:");
sb.append(this.tbl_name);
sb.append(",part_vals:");
sb.append(this.part_vals);
sb.append(",deleteData:");
sb.append(this.deleteData);
sb.append(")");
return sb.toString();
}

}

public static class drop_partition_result implements TBase, java.io.Serializable {
private boolean success;
private NoSuchObjectException o1;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
}

public drop_partition_result() {
}

public drop_partition_result(
boolean success,
NoSuchObjectException o1,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public NoSuchObjectException getO1() {
return this.o1;
}

public void setO1(NoSuchObjectException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof drop_partition_result)
  return this.equals((drop_partition_result)that);
return false;
}

public boolean equals(drop_partition_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new NoSuchObjectException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("drop_partition_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("drop_partition_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_partition_args implements TBase, java.io.Serializable {
private String db_name;
private String tbl_name;
private List<String> part_vals;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean tbl_name = false;
public boolean part_vals = false;
}

public get_partition_args() {
}

public get_partition_args(
String db_name,
String tbl_name,
List<String> part_vals)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
this.part_vals = part_vals;
this.__isset.part_vals = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTbl_name() {
return this.tbl_name;
}

public void setTbl_name(String tbl_name) {
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
}

public void unsetTbl_name() {
this.__isset.tbl_name = false;
}

public int getPart_valsSize() {
return (this.part_vals == null) ? 0 : this.part_vals.size();
}

public java.util.Iterator<String> getPart_valsIterator() {
return (this.part_vals == null) ? null : this.part_vals.iterator();
}

public void addToPart_vals(String elem) {
if (this.part_vals == null) {
  this.part_vals = new ArrayList<String>();
}
this.part_vals.add(elem);
this.__isset.part_vals = true;
}

public List<String> getPart_vals() {
return this.part_vals;
}

public void setPart_vals(List<String> part_vals) {
this.part_vals = part_vals;
this.__isset.part_vals = true;
}

public void unsetPart_vals() {
this.part_vals = null;
this.__isset.part_vals = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_partition_args)
  return this.equals((get_partition_args)that);
return false;
}

public boolean equals(get_partition_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_tbl_name = true && (this.tbl_name != null);
boolean that_present_tbl_name = true && (that.tbl_name != null);
if (this_present_tbl_name || that_present_tbl_name) {
  if (!(this_present_tbl_name && that_present_tbl_name))
    return false;
  if (!this.tbl_name.equals(that.tbl_name))
    return false;
}

boolean this_present_part_vals = true && (this.part_vals != null);
boolean that_present_part_vals = true && (that.part_vals != null);
if (this_present_part_vals || that_present_part_vals) {
  if (!(this_present_part_vals && that_present_part_vals))
    return false;
  if (!this.part_vals.equals(that.part_vals))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.tbl_name = iprot.readString();
        this.__isset.tbl_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.LIST) {
        {
          TList _list82 = iprot.readListBegin();
          this.part_vals = new ArrayList<String>(_list82.size);
          for (int _i83 = 0; _i83 < _list82.size; ++_i83)
          {
            String _elem84 = null;
            _elem84 = iprot.readString();
            this.part_vals.add(_elem84);
          }
          iprot.readListEnd();
        }
        this.__isset.part_vals = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_partition_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.tbl_name != null) {
  field.name = "tbl_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.tbl_name);
  oprot.writeFieldEnd();
}
if (this.part_vals != null) {
  field.name = "part_vals";
  field.type = TType.LIST;
  field.id = 3;
  oprot.writeFieldBegin(field);
  {
    oprot.writeListBegin(new TList(TType.STRING, this.part_vals.size()));
    for (String _iter85 : this.part_vals)    {
      oprot.writeString(_iter85);
    }
    oprot.writeListEnd();
  }
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_partition_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",tbl_name:");
sb.append(this.tbl_name);
sb.append(",part_vals:");
sb.append(this.part_vals);
sb.append(")");
return sb.toString();
}

}

public static class get_partition_result implements TBase, java.io.Serializable {
private Partition success;
private MetaException o1;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
}

public get_partition_result() {
}

public get_partition_result(
Partition success,
MetaException o1)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
}

public Partition getSuccess() {
return this.success;
}

public void setSuccess(Partition success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public MetaException getO1() {
return this.o1;
}

public void setO1(MetaException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_partition_result)
  return this.equals((get_partition_result)that);
return false;
}

public boolean equals(get_partition_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.STRUCT) {
        this.success = new Partition();
        this.success.read(iprot);
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new MetaException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_partition_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.STRUCT;
    field.id = 0;
    oprot.writeFieldBegin(field);
    this.success.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_partition_result(");
sb.append("success:");
sb.append(this.success.toString());
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(")");
return sb.toString();
}

}

public static class get_partitions_args implements TBase, java.io.Serializable {
private String db_name;
private String tbl_name;
private short max_parts;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean tbl_name = false;
public boolean max_parts = false;
}

public get_partitions_args() {
this.max_parts = -1;

}

public get_partitions_args(
String db_name,
String tbl_name,
short max_parts)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
this.max_parts = max_parts;
this.__isset.max_parts = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTbl_name() {
return this.tbl_name;
}

public void setTbl_name(String tbl_name) {
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
}

public void unsetTbl_name() {
this.__isset.tbl_name = false;
}

public short getMax_parts() {
return this.max_parts;
}

public void setMax_parts(short max_parts) {
this.max_parts = max_parts;
this.__isset.max_parts = true;
}

public void unsetMax_parts() {
this.__isset.max_parts = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_partitions_args)
  return this.equals((get_partitions_args)that);
return false;
}

public boolean equals(get_partitions_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_tbl_name = true && (this.tbl_name != null);
boolean that_present_tbl_name = true && (that.tbl_name != null);
if (this_present_tbl_name || that_present_tbl_name) {
  if (!(this_present_tbl_name && that_present_tbl_name))
    return false;
  if (!this.tbl_name.equals(that.tbl_name))
    return false;
}

boolean this_present_max_parts = true;
boolean that_present_max_parts = true;
if (this_present_max_parts || that_present_max_parts) {
  if (!(this_present_max_parts && that_present_max_parts))
    return false;
  if (this.max_parts != that.max_parts)
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.tbl_name = iprot.readString();
        this.__isset.tbl_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.I16) {
        this.max_parts = iprot.readI16();
        this.__isset.max_parts = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_partitions_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.tbl_name != null) {
  field.name = "tbl_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.tbl_name);
  oprot.writeFieldEnd();
}
field.name = "max_parts";
field.type = TType.I16;
field.id = 3;
oprot.writeFieldBegin(field);
oprot.writeI16(this.max_parts);
oprot.writeFieldEnd();
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_partitions_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",tbl_name:");
sb.append(this.tbl_name);
sb.append(",max_parts:");
sb.append(this.max_parts);
sb.append(")");
return sb.toString();
}

}

public static class get_partitions_result implements TBase, java.io.Serializable {
private List<Partition> success;
private NoSuchObjectException o1;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
}

public get_partitions_result() {
}

public get_partitions_result(
List<Partition> success,
NoSuchObjectException o1,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public int getSuccessSize() {
return (this.success == null) ? 0 : this.success.size();
}

public java.util.Iterator<Partition> getSuccessIterator() {
return (this.success == null) ? null : this.success.iterator();
}

public void addToSuccess(Partition elem) {
if (this.success == null) {
  this.success = new ArrayList<Partition>();
}
this.success.add(elem);
this.__isset.success = true;
}

public List<Partition> getSuccess() {
return this.success;
}

public void setSuccess(List<Partition> success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.success = null;
this.__isset.success = false;
}

public NoSuchObjectException getO1() {
return this.o1;
}

public void setO1(NoSuchObjectException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof get_partitions_result)
  return this.equals((get_partitions_result)that);
return false;
}

public boolean equals(get_partitions_result that) {
if (that == null)
  return false;

boolean this_present_success = true && (this.success != null);
boolean that_present_success = true && (that.success != null);
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (!this.success.equals(that.success))
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.LIST) {
        {
          TList _list86 = iprot.readListBegin();
          this.success = new ArrayList<Partition>(_list86.size);
          for (int _i87 = 0; _i87 < _list86.size; ++_i87)
          {
            Partition _elem88 = new Partition();
            _elem88 = new Partition();
            _elem88.read(iprot);
            this.success.add(_elem88);
          }
          iprot.readListEnd();
        }
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new NoSuchObjectException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("get_partitions_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  if (this.success != null) {
    field.name = "success";
    field.type = TType.LIST;
    field.id = 0;
    oprot.writeFieldBegin(field);
    {
      oprot.writeListBegin(new TList(TType.STRUCT, this.success.size()));
      for (Partition _iter89 : this.success)      {
        _iter89.write(oprot);
      }
      oprot.writeListEnd();
    }
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("get_partitions_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class set_partition_parameters_args implements TBase, java.io.Serializable {
private String db_name;
private String tbl_name;
private String pname;
private Map<String,String> params;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean db_name = false;
public boolean tbl_name = false;
public boolean pname = false;
public boolean params = false;
}

public set_partition_parameters_args() {
}

public set_partition_parameters_args(
String db_name,
String tbl_name,
String pname,
Map<String,String> params)
{
this();
this.db_name = db_name;
this.__isset.db_name = true;
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
this.pname = pname;
this.__isset.pname = true;
this.params = params;
this.__isset.params = true;
}

public String getDb_name() {
return this.db_name;
}

public void setDb_name(String db_name) {
this.db_name = db_name;
this.__isset.db_name = true;
}

public void unsetDb_name() {
this.__isset.db_name = false;
}

public String getTbl_name() {
return this.tbl_name;
}

public void setTbl_name(String tbl_name) {
this.tbl_name = tbl_name;
this.__isset.tbl_name = true;
}

public void unsetTbl_name() {
this.__isset.tbl_name = false;
}

public String getPname() {
return this.pname;
}

public void setPname(String pname) {
this.pname = pname;
this.__isset.pname = true;
}

public void unsetPname() {
this.__isset.pname = false;
}

public int getParamsSize() {
return (this.params == null) ? 0 : this.params.size();
}

public void putToParams(String key, String val) {
if (this.params == null) {
  this.params = new HashMap<String,String>();
}
this.params.put(key, val);
this.__isset.params = true;
}

public Map<String,String> getParams() {
return this.params;
}

public void setParams(Map<String,String> params) {
this.params = params;
this.__isset.params = true;
}

public void unsetParams() {
this.params = null;
this.__isset.params = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof set_partition_parameters_args)
  return this.equals((set_partition_parameters_args)that);
return false;
}

public boolean equals(set_partition_parameters_args that) {
if (that == null)
  return false;

boolean this_present_db_name = true && (this.db_name != null);
boolean that_present_db_name = true && (that.db_name != null);
if (this_present_db_name || that_present_db_name) {
  if (!(this_present_db_name && that_present_db_name))
    return false;
  if (!this.db_name.equals(that.db_name))
    return false;
}

boolean this_present_tbl_name = true && (this.tbl_name != null);
boolean that_present_tbl_name = true && (that.tbl_name != null);
if (this_present_tbl_name || that_present_tbl_name) {
  if (!(this_present_tbl_name && that_present_tbl_name))
    return false;
  if (!this.tbl_name.equals(that.tbl_name))
    return false;
}

boolean this_present_pname = true && (this.pname != null);
boolean that_present_pname = true && (that.pname != null);
if (this_present_pname || that_present_pname) {
  if (!(this_present_pname && that_present_pname))
    return false;
  if (!this.pname.equals(that.pname))
    return false;
}

boolean this_present_params = true && (this.params != null);
boolean that_present_params = true && (that.params != null);
if (this_present_params || that_present_params) {
  if (!(this_present_params && that_present_params))
    return false;
  if (!this.params.equals(that.params))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRING) {
        this.db_name = iprot.readString();
        this.__isset.db_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRING) {
        this.tbl_name = iprot.readString();
        this.__isset.tbl_name = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 3:
      if (field.type == TType.STRING) {
        this.pname = iprot.readString();
        this.__isset.pname = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 4:
      if (field.type == TType.MAP) {
        {
          TMap _map90 = iprot.readMapBegin();
          this.params = new HashMap<String,String>(2*_map90.size);
          for (int _i91 = 0; _i91 < _map90.size; ++_i91)
          {
            String _key92;
            String _val93;
            _key92 = iprot.readString();
            _val93 = iprot.readString();
            this.params.put(_key92, _val93);
          }
          iprot.readMapEnd();
        }
        this.__isset.params = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("set_partition_parameters_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.db_name != null) {
  field.name = "db_name";
  field.type = TType.STRING;
  field.id = 1;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.db_name);
  oprot.writeFieldEnd();
}
if (this.tbl_name != null) {
  field.name = "tbl_name";
  field.type = TType.STRING;
  field.id = 2;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.tbl_name);
  oprot.writeFieldEnd();
}
if (this.pname != null) {
  field.name = "pname";
  field.type = TType.STRING;
  field.id = 3;
  oprot.writeFieldBegin(field);
  oprot.writeString(this.pname);
  oprot.writeFieldEnd();
}
if (this.params != null) {
  field.name = "params";
  field.type = TType.MAP;
  field.id = 4;
  oprot.writeFieldBegin(field);
  {
    oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.params.size()));
    for (String _iter94 : this.params.keySet())    {
      oprot.writeString(_iter94);
      oprot.writeString(this.params.get(_iter94));
    }
    oprot.writeMapEnd();
  }
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("set_partition_parameters_args(");
sb.append("db_name:");
sb.append(this.db_name);
sb.append(",tbl_name:");
sb.append(this.tbl_name);
sb.append(",pname:");
sb.append(this.pname);
sb.append(",params:");
sb.append(this.params);
sb.append(")");
return sb.toString();
}

}

public static class set_partition_parameters_result implements TBase, java.io.Serializable {
private boolean success;
private NoSuchObjectException o1;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
}

public set_partition_parameters_result() {
}

public set_partition_parameters_result(
boolean success,
NoSuchObjectException o1,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public NoSuchObjectException getO1() {
return this.o1;
}

public void setO1(NoSuchObjectException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof set_partition_parameters_result)
  return this.equals((set_partition_parameters_result)that);
return false;
}

public boolean equals(set_partition_parameters_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new NoSuchObjectException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("set_partition_parameters_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("set_partition_parameters_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class alter_partitions_args implements TBase, java.io.Serializable {
private StorageDescriptor sd;
private List<String> parts;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean sd = false;
public boolean parts = false;
}

public alter_partitions_args() {
}

public alter_partitions_args(
StorageDescriptor sd,
List<String> parts)
{
this();
this.sd = sd;
this.__isset.sd = true;
this.parts = parts;
this.__isset.parts = true;
}

public StorageDescriptor getSd() {
return this.sd;
}

public void setSd(StorageDescriptor sd) {
this.sd = sd;
this.__isset.sd = true;
}

public void unsetSd() {
this.sd = null;
this.__isset.sd = false;
}

public int getPartsSize() {
return (this.parts == null) ? 0 : this.parts.size();
}

public java.util.Iterator<String> getPartsIterator() {
return (this.parts == null) ? null : this.parts.iterator();
}

public void addToParts(String elem) {
if (this.parts == null) {
  this.parts = new ArrayList<String>();
}
this.parts.add(elem);
this.__isset.parts = true;
}

public List<String> getParts() {
return this.parts;
}

public void setParts(List<String> parts) {
this.parts = parts;
this.__isset.parts = true;
}

public void unsetParts() {
this.parts = null;
this.__isset.parts = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof alter_partitions_args)
  return this.equals((alter_partitions_args)that);
return false;
}

public boolean equals(alter_partitions_args that) {
if (that == null)
  return false;

boolean this_present_sd = true && (this.sd != null);
boolean that_present_sd = true && (that.sd != null);
if (this_present_sd || that_present_sd) {
  if (!(this_present_sd && that_present_sd))
    return false;
  if (!this.sd.equals(that.sd))
    return false;
}

boolean this_present_parts = true && (this.parts != null);
boolean that_present_parts = true && (that.parts != null);
if (this_present_parts || that_present_parts) {
  if (!(this_present_parts && that_present_parts))
    return false;
  if (!this.parts.equals(that.parts))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRUCT) {
        this.sd = new StorageDescriptor();
        this.sd.read(iprot);
        this.__isset.sd = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.LIST) {
        {
          TList _list95 = iprot.readListBegin();
          this.parts = new ArrayList<String>(_list95.size);
          for (int _i96 = 0; _i96 < _list95.size; ++_i96)
          {
            String _elem97 = null;
            _elem97 = iprot.readString();
            this.parts.add(_elem97);
          }
          iprot.readListEnd();
        }
        this.__isset.parts = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("alter_partitions_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.sd != null) {
  field.name = "sd";
  field.type = TType.STRUCT;
  field.id = 1;
  oprot.writeFieldBegin(field);
  this.sd.write(oprot);
  oprot.writeFieldEnd();
}
if (this.parts != null) {
  field.name = "parts";
  field.type = TType.LIST;
  field.id = 2;
  oprot.writeFieldBegin(field);
  {
    oprot.writeListBegin(new TList(TType.STRING, this.parts.size()));
    for (String _iter98 : this.parts)    {
      oprot.writeString(_iter98);
    }
    oprot.writeListEnd();
  }
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("alter_partitions_args(");
sb.append("sd:");
sb.append(this.sd.toString());
sb.append(",parts:");
sb.append(this.parts);
sb.append(")");
return sb.toString();
}

}

public static class alter_partitions_result implements TBase, java.io.Serializable {
private boolean success;
private InvalidOperationException o1;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
}

public alter_partitions_result() {
}

public alter_partitions_result(
boolean success,
InvalidOperationException o1,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public InvalidOperationException getO1() {
return this.o1;
}

public void setO1(InvalidOperationException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof alter_partitions_result)
  return this.equals((alter_partitions_result)that);
return false;
}

public boolean equals(alter_partitions_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new InvalidOperationException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("alter_partitions_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("alter_partitions_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

public static class create_index_args implements TBase, java.io.Serializable {
private Index index_def;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean index_def = false;
}

public create_index_args() {
}

public create_index_args(
Index index_def)
{
this();
this.index_def = index_def;
this.__isset.index_def = true;
}

public Index getIndex_def() {
return this.index_def;
}

public void setIndex_def(Index index_def) {
this.index_def = index_def;
this.__isset.index_def = true;
}

public void unsetIndex_def() {
this.index_def = null;
this.__isset.index_def = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_index_args)
  return this.equals((create_index_args)that);
return false;
}

public boolean equals(create_index_args that) {
if (that == null)
  return false;

boolean this_present_index_def = true && (this.index_def != null);
boolean that_present_index_def = true && (that.index_def != null);
if (this_present_index_def || that_present_index_def) {
  if (!(this_present_index_def && that_present_index_def))
    return false;
  if (!this.index_def.equals(that.index_def))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 1:
      if (field.type == TType.STRUCT) {
        this.index_def = new Index();
        this.index_def.read(iprot);
        this.__isset.index_def = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_index_args");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.index_def != null) {
  field.name = "index_def";
  field.type = TType.STRUCT;
  field.id = 1;
  oprot.writeFieldBegin(field);
  this.index_def.write(oprot);
  oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_index_args(");
sb.append("index_def:");
sb.append(this.index_def.toString());
sb.append(")");
return sb.toString();
}

}

public static class create_index_result implements TBase, java.io.Serializable {
private boolean success;
private IndexAlreadyExistsException o1;
private MetaException o2;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean success = false;
public boolean o1 = false;
public boolean o2 = false;
}

public create_index_result() {
}

public create_index_result(
boolean success,
IndexAlreadyExistsException o1,
MetaException o2)
{
this();
this.success = success;
this.__isset.success = true;
this.o1 = o1;
this.__isset.o1 = true;
this.o2 = o2;
this.__isset.o2 = true;
}

public boolean isSuccess() {
return this.success;
}

public void setSuccess(boolean success) {
this.success = success;
this.__isset.success = true;
}

public void unsetSuccess() {
this.__isset.success = false;
}

public IndexAlreadyExistsException getO1() {
return this.o1;
}

public void setO1(IndexAlreadyExistsException o1) {
this.o1 = o1;
this.__isset.o1 = true;
}

public void unsetO1() {
this.o1 = null;
this.__isset.o1 = false;
}

public MetaException getO2() {
return this.o2;
}

public void setO2(MetaException o2) {
this.o2 = o2;
this.__isset.o2 = true;
}

public void unsetO2() {
this.o2 = null;
this.__isset.o2 = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof create_index_result)
  return this.equals((create_index_result)that);
return false;
}

public boolean equals(create_index_result that) {
if (that == null)
  return false;

boolean this_present_success = true;
boolean that_present_success = true;
if (this_present_success || that_present_success) {
  if (!(this_present_success && that_present_success))
    return false;
  if (this.success != that.success)
    return false;
}

boolean this_present_o1 = true && (this.o1 != null);
boolean that_present_o1 = true && (that.o1 != null);
if (this_present_o1 || that_present_o1) {
  if (!(this_present_o1 && that_present_o1))
    return false;
  if (!this.o1.equals(that.o1))
    return false;
}

boolean this_present_o2 = true && (this.o2 != null);
boolean that_present_o2 = true && (that.o2 != null);
if (this_present_o2 || that_present_o2) {
  if (!(this_present_o2 && that_present_o2))
    return false;
  if (!this.o2.equals(that.o2))
    return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
  field = iprot.readFieldBegin();
  if (field.type == TType.STOP) { 
    break;
  }
  switch (field.id)
  {
    case 0:
      if (field.type == TType.BOOL) {
        this.success = iprot.readBool();
        this.__isset.success = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 1:
      if (field.type == TType.STRUCT) {
        this.o1 = new IndexAlreadyExistsException();
        this.o1.read(iprot);
        this.__isset.o1 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    case 2:
      if (field.type == TType.STRUCT) {
        this.o2 = new MetaException();
        this.o2.read(iprot);
        this.__isset.o2 = true;
      } else { 
        TProtocolUtil.skip(iprot, field.type);
      }
      break;
    default:
      TProtocolUtil.skip(iprot, field.type);
      break;
  }
  iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("create_index_result");
oprot.writeStructBegin(struct);
TField field = new TField();

if (this.__isset.success) {
  field.name = "success";
  field.type = TType.BOOL;
  field.id = 0;
  oprot.writeFieldBegin(field);
  oprot.writeBool(this.success);
  oprot.writeFieldEnd();
} else if (this.__isset.o1) {
  if (this.o1 != null) {
    field.name = "o1";
    field.type = TType.STRUCT;
    field.id = 1;
    oprot.writeFieldBegin(field);
    this.o1.write(oprot);
    oprot.writeFieldEnd();
  }
} else if (this.__isset.o2) {
  if (this.o2 != null) {
    field.name = "o2";
    field.type = TType.STRUCT;
    field.id = 2;
    oprot.writeFieldBegin(field);
    this.o2.write(oprot);
    oprot.writeFieldEnd();
  }
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("create_index_result(");
sb.append("success:");
sb.append(this.success);
sb.append(",o1:");
sb.append(this.o1.toString());
sb.append(",o2:");
sb.append(this.o2.toString());
sb.append(")");
return sb.toString();
}

}

}
