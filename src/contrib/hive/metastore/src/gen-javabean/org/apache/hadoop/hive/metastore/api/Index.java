/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.hive.metastore.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import com.facebook.thrift.*;

import com.facebook.thrift.protocol.*;
import com.facebook.thrift.transport.*;

public class Index implements TBase, java.io.Serializable {
private String indexName;
private int indexType;
private String tableName;
private String databaseName;
private List<String> colNames;

public final Isset __isset = new Isset();
public static final class Isset implements java.io.Serializable {
public boolean indexName = false;
public boolean indexType = false;
public boolean tableName = false;
public boolean databaseName = false;
public boolean colNames = false;
}

public Index() {
}

public Index(
String indexName,
int indexType,
String tableName,
String databaseName,
List<String> colNames)
{
this();
this.indexName = indexName;
this.__isset.indexName = true;
this.indexType = indexType;
this.__isset.indexType = true;
this.tableName = tableName;
this.__isset.tableName = true;
this.databaseName = databaseName;
this.__isset.databaseName = true;
this.colNames = colNames;
this.__isset.colNames = true;
}

public String getIndexName() {
return this.indexName;
}

public void setIndexName(String indexName) {
this.indexName = indexName;
this.__isset.indexName = true;
}

public void unsetIndexName() {
this.__isset.indexName = false;
}

public int getIndexType() {
return this.indexType;
}

public void setIndexType(int indexType) {
this.indexType = indexType;
this.__isset.indexType = true;
}

public void unsetIndexType() {
this.__isset.indexType = false;
}

public String getTableName() {
return this.tableName;
}

public void setTableName(String tableName) {
this.tableName = tableName;
this.__isset.tableName = true;
}

public void unsetTableName() {
this.__isset.tableName = false;
}

public String getDatabaseName() {
return this.databaseName;
}

public void setDatabaseName(String databaseName) {
this.databaseName = databaseName;
this.__isset.databaseName = true;
}

public void unsetDatabaseName() {
this.__isset.databaseName = false;
}

public int getColNamesSize() {
return (this.colNames == null) ? 0 : this.colNames.size();
}

public java.util.Iterator<String> getColNamesIterator() {
return (this.colNames == null) ? null : this.colNames.iterator();
}

public void addToColNames(String elem) {
if (this.colNames == null) {
this.colNames = new ArrayList<String>();
}
this.colNames.add(elem);
this.__isset.colNames = true;
}

public List<String> getColNames() {
return this.colNames;
}

public void setColNames(List<String> colNames) {
this.colNames = colNames;
this.__isset.colNames = true;
}

public void unsetColNames() {
this.colNames = null;
this.__isset.colNames = false;
}

public boolean equals(Object that) {
if (that == null)
  return false;
if (that instanceof Index)
  return this.equals((Index)that);
return false;
}

public boolean equals(Index that) {
if (that == null)
  return false;

boolean this_present_indexName = true && (this.indexName != null);
boolean that_present_indexName = true && (that.indexName != null);
if (this_present_indexName || that_present_indexName) {
if (!(this_present_indexName && that_present_indexName))
  return false;
if (!this.indexName.equals(that.indexName))
  return false;
}

boolean this_present_indexType = true;
boolean that_present_indexType = true;
if (this_present_indexType || that_present_indexType) {
if (!(this_present_indexType && that_present_indexType))
  return false;
if (this.indexType != that.indexType)
  return false;
}

boolean this_present_tableName = true && (this.tableName != null);
boolean that_present_tableName = true && (that.tableName != null);
if (this_present_tableName || that_present_tableName) {
if (!(this_present_tableName && that_present_tableName))
  return false;
if (!this.tableName.equals(that.tableName))
  return false;
}

boolean this_present_databaseName = true && (this.databaseName != null);
boolean that_present_databaseName = true && (that.databaseName != null);
if (this_present_databaseName || that_present_databaseName) {
if (!(this_present_databaseName && that_present_databaseName))
  return false;
if (!this.databaseName.equals(that.databaseName))
  return false;
}

boolean this_present_colNames = true && (this.colNames != null);
boolean that_present_colNames = true && (that.colNames != null);
if (this_present_colNames || that_present_colNames) {
if (!(this_present_colNames && that_present_colNames))
  return false;
if (!this.colNames.equals(that.colNames))
  return false;
}

return true;
}

public int hashCode() {
return 0;
}

public void read(TProtocol iprot) throws TException {
TField field;
iprot.readStructBegin();
while (true)
{
field = iprot.readFieldBegin();
if (field.type == TType.STOP) { 
  break;
}
switch (field.id)
{
  case -1:
    if (field.type == TType.STRING) {
      this.indexName = iprot.readString();
      this.__isset.indexName = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case -2:
    if (field.type == TType.I32) {
      this.indexType = iprot.readI32();
      this.__isset.indexType = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case -3:
    if (field.type == TType.STRING) {
      this.tableName = iprot.readString();
      this.__isset.tableName = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case -4:
    if (field.type == TType.STRING) {
      this.databaseName = iprot.readString();
      this.__isset.databaseName = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  case -5:
    if (field.type == TType.LIST) {
      {
        TList _list44 = iprot.readListBegin();
        this.colNames = new ArrayList<String>(_list44.size);
        for (int _i45 = 0; _i45 < _list44.size; ++_i45)
        {
          String _elem46 = null;
          _elem46 = iprot.readString();
          this.colNames.add(_elem46);
        }
        iprot.readListEnd();
      }
      this.__isset.colNames = true;
    } else { 
      TProtocolUtil.skip(iprot, field.type);
    }
    break;
  default:
    TProtocolUtil.skip(iprot, field.type);
    break;
}
iprot.readFieldEnd();
}
iprot.readStructEnd();
}

public void write(TProtocol oprot) throws TException {
TStruct struct = new TStruct("Index");
oprot.writeStructBegin(struct);
TField field = new TField();
if (this.indexName != null) {
field.name = "indexName";
field.type = TType.STRING;
field.id = -1;
oprot.writeFieldBegin(field);
oprot.writeString(this.indexName);
oprot.writeFieldEnd();
}
field.name = "indexType";
field.type = TType.I32;
field.id = -2;
oprot.writeFieldBegin(field);
oprot.writeI32(this.indexType);
oprot.writeFieldEnd();
if (this.tableName != null) {
field.name = "tableName";
field.type = TType.STRING;
field.id = -3;
oprot.writeFieldBegin(field);
oprot.writeString(this.tableName);
oprot.writeFieldEnd();
}
if (this.databaseName != null) {
field.name = "databaseName";
field.type = TType.STRING;
field.id = -4;
oprot.writeFieldBegin(field);
oprot.writeString(this.databaseName);
oprot.writeFieldEnd();
}
if (this.colNames != null) {
field.name = "colNames";
field.type = TType.LIST;
field.id = -5;
oprot.writeFieldBegin(field);
{
  oprot.writeListBegin(new TList(TType.STRING, this.colNames.size()));
  for (String _iter47 : this.colNames)  {
    oprot.writeString(_iter47);
  }
  oprot.writeListEnd();
}
oprot.writeFieldEnd();
}
oprot.writeFieldStop();
oprot.writeStructEnd();
}

public String toString() {
StringBuilder sb = new StringBuilder("Index(");
sb.append("indexName:");
sb.append(this.indexName);
sb.append(",indexType:");
sb.append(this.indexType);
sb.append(",tableName:");
sb.append(this.tableName);
sb.append(",databaseName:");
sb.append(this.databaseName);
sb.append(",colNames:");
sb.append(this.colNames);
sb.append(")");
return sb.toString();
}

}

